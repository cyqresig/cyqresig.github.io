<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>绯雨闲丸 Blog</title>
    <description>关于前端开发,react-native开发,nodejs开发 | 绯雨闲丸，Web &amp; Mobile，Front-End Engineer | 这里是 @HISAME SHIZUMARU绯雨闲丸 的个人博客，与你一起发现更大的世界。</description>
    <link>http://www.vanadis.cn/</link>
    <atom:link href="http://www.vanadis.cn/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 29 Jan 2017 16:09:43 +0800</pubDate>
    <lastBuildDate>Sun, 29 Jan 2017 16:09:43 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>react-native整合进已存在的Android原生app</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;示例&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cyqresig/ReactNativeIntegrationWithExistingApps&quot;&gt;ReactNativeIntegrationWithExistingApps&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先安装好react-native开发环境&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保证你的android工程在项目目录的android目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;$root/android&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建一个原生app, 选&lt;code class=&quot;highlighter-rouge&quot;&gt;Android Application&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;文件, 并加入必要的scripts与dependency&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js
 {
   &quot;name&quot;: &quot;react-native-into-test&quot;,
   &quot;version&quot;: &quot;1.0.0&quot;,
   &quot;description&quot;: &quot;&quot;,
   &quot;main&quot;: &quot;index.js&quot;,
   &quot;scripts&quot;: {
     &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,
     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
   },
   &quot;author&quot;: &quot;&quot;,
   &quot;license&quot;: &quot;MIT&quot;,
   &quot;dependencies&quot;: {
     &quot;react&quot;: &quot;15.4.2&quot;,
     &quot;react-native&quot;: &quot;^0.40.0&quot;
   }
 }
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装依赖包&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.android.js&lt;/code&gt;文件, 并编辑内容:&lt;/p&gt;

    &lt;p&gt;```js
 import React from ‘react’;
 import {
     AppRegistry,
     StyleSheet,
     Text,
     View
 } from ‘react-native’;&lt;/p&gt;

    &lt;p&gt;class HelloWorld extends React.Component {
     render() {
         return (
             &amp;lt;View style={styles.container}&amp;gt;
     &amp;lt;Text style={styles.hello}&amp;gt;It is react-native Text!&amp;lt;/Text&amp;gt;
         &amp;lt;/View&amp;gt;
     )
     }
 }
 var styles = StyleSheet.create({
     container: {
         flex: 1,
         justifyContent: ‘center’,
     },
     hello: {
         fontSize: 20,
         textAlign: ‘center’,
         margin: 10,
     },
 });&lt;/p&gt;

    &lt;p&gt;AppRegistry.registerComponent(‘HelloWorld’, () =&amp;gt; HelloWorld);
 ```&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在app下的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;下添加React Native依赖配置:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js
 dependencies {
         ...
         compile &quot;com.facebook.react:react-native:+&quot; // From node_modules.
 }
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在project下的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;下, 增加react-native的本地maven入口配置&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js
 allprojects {
     repositories {
         ...
         maven {
             // All of React Native (JS, Android binaries) is installed from npm
             url &quot;$rootDir/../node_modules/react-native/android&quot;
         }
     }
     ...
 }
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;下增加权限与Activity&lt;/p&gt;

    &lt;p&gt;```js&lt;/p&gt;
    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;

    &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;

    &lt;activity android:name=&quot;.MyReactActivity&quot; android:label=&quot;@string/app_name&quot; android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&gt;
 &lt;/activity&gt;
    &lt;p&gt;```&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增加原生代码&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MyReactActivity&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DefaultHardwareBackBtnHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactRootView&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mReactRootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactInstanceManager&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;mReactRootView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactRootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setBundleAssetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.android.bundle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setJSMainModuleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.android&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addPackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MainReactPackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setUseDeveloperSupport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BuildConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setInitialLifecycleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LifecycleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RESUMED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;mReactRootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startReactApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;HelloWorld&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mReactRootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;invokeDefaultOnBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onHostPause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onHostResume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onHostDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Override&lt;/span&gt;
     &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Override&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onKeyUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KeyEvent&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;KeyEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;KEYCODE_MENU&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mReactInstanceManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;showDevOptionsDialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onKeyUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;, 启动debug server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;cd android &amp;amp;&amp;amp; ./gradlew installDebug&lt;/code&gt;, 编译后app会安装入模拟器或设备中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看模拟器或真机上的运行情况&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 29 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/29/react-native-integration-with-existing-apps-android/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/29/react-native-integration-with-existing-apps-android/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>react-native整合进已存在的iOS原生app</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;示例&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cyqresig/ReactNativeIntegrationWithExistingApps&quot;&gt;ReactNativeIntegrationWithExistingApps&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先安装好react-native开发环境&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保证你的ios工程在项目目录的ios目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;$root/ios&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装ios包管理器CocoaPods, 我们会使用它将react-native的framework代码安装进当前工程中&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install cocoapods&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建一个原生app, 选&lt;code class=&quot;highlighter-rouge&quot;&gt;Single View Application&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;文件, 并加入必要的scripts与dependency&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js
 {
   &quot;name&quot;: &quot;react-native-into-test&quot;,
   &quot;version&quot;: &quot;1.0.0&quot;,
   &quot;description&quot;: &quot;&quot;,
   &quot;main&quot;: &quot;index.js&quot;,
   &quot;scripts&quot;: {
     &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;,
     &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;
   },
   &quot;author&quot;: &quot;&quot;,
   &quot;license&quot;: &quot;MIT&quot;,
   &quot;dependencies&quot;: {
     &quot;react&quot;: &quot;15.4.2&quot;,
     &quot;react-native&quot;: &quot;^0.40.0&quot;
   }
 }
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装依赖包&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建cocosPads配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod init&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;, 编辑内容:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js
   target &#39;reactnativeintotest&#39; do
       pod &#39;React&#39;, :path =&amp;gt; &#39;../node_modules/react-native&#39;, :subspecs =&amp;gt; [
        &#39;Core&#39;,
        &#39;RCTText&#39;,
        &#39;RCTNetwork&#39;,
        &#39;RCTWebSocket&#39;,
      ]
    end
  &lt;/code&gt;
9. 安装cocoapods管理的依赖项&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.ios.js&lt;/code&gt;文件, 并编辑内容:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;AppRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;react-native&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/View&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StyleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;justifyContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;center&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;fontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;textAlign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;center&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;AppRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;HelloWorld&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在需要打开react-native应用的controller处加入如下代码:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RCTBundleURLProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RCTRootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IBAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ToReactNativeWorldPressed&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsCodeLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;jsCodeLocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RCTBundleURLProvider&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sharedSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jsBundleURLForBundleRoot&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.ios&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fallbackResource&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;RCTRootView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rootView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RCTRootView&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initWithBundleURL&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jsCodeLocation&lt;/span&gt;
                                                        &lt;span class=&quot;nl&quot;&gt;moduleName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HelloWorld&quot;&lt;/span&gt;
                                                 &lt;span class=&quot;nl&quot;&gt;initialProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                                     &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scores&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                                                                             &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                                                 &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                                                 &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;42&quot;&lt;/span&gt;
                                                                                 &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                                                             &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                                                 &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Joel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                                                 &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10&quot;&lt;/span&gt;
                                                                                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                                                             &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                                                     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                                                     &lt;span class=&quot;nl&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;


    &lt;span class=&quot;nx&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rootView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;presentViewController&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;YES&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;, 启动debug server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到项目根目录下ios工程目录下的.xcworkspace文件(cocoapods配置后生成的新的工程文件), 双击打开&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开后, 在Xode的界面上点击Run&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看模拟器或真机上的运行情况&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/28/react-native-integration-with-existing-apps/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/28/react-native-integration-with-existing-apps/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Mac上安装安装cocoapods的注意事项</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;安装步骤&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;检查一下gem版本, 必要时升级gem，如果它的版本过低也可能导致安装失败，升级命令如下：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem update --system&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mac OS X 10.11以前，安装cocoapods的命令如下：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install cocoapods&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;OS X 10.11以后，会在安装时碰到没有权限的问题, 需要换成下面的命令：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install -n /usr/local/bin cocoapods&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用pod命令安装, 根据网络线路情况, 可能会非常的耗时, 推荐用电信的线路, 或者翻墙, 命令如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod setup&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看一下pod的版本号, 命令如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod --version&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看一下pod的repo, 命令如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod repo list&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;如结果为0 repos则说明安装不成功，可以删除.cocoapods目录, 重新进行安装&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新安装的命令如下：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/.cocoapods/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo rm -rf ~/.cocoapods/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod setup&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/28/cocoapods-installation/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/28/cocoapods-installation/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>CocoaPod</category>
        
        
      </item>
    
      <item>
        <title>ios开发移除cocoapods配置</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;CocoaPods可以通过命令,将第三方类库配置到我们的项目中,
而不需要采用手动拖拽的方式进行配置.
但是很遗憾的是, CocoaPads并没有移除这些配置的命令,
所以,只能靠手动的方式从项目中移除了.&lt;/p&gt;

&lt;h2 id=&quot;cocoapads&quot;&gt;在项目中删除某个CocoaPads配置的第三方类库&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下找到Podfile文件并打开&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到需要删除的配置文本, 将之删除, 示例如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod &#39;AFNetwork&#39;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;终端在当前项目目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;命令, 每三方类库被移除&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cocoapods&quot;&gt;在项目中删除整个CocoaPods配置&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;删除项目根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;xcworkspace&lt;/code&gt;文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;删除项目根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Pods&lt;/code&gt;文件夹&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在XCode中删除项目中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Pods&lt;/code&gt;文件夹及&lt;code class=&quot;highlighter-rouge&quot;&gt;Pods.xcconfig&lt;/code&gt;引用和&lt;code class=&quot;highlighter-rouge&quot;&gt;libpods.a&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在XCode中, 选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;选项，删除&lt;code class=&quot;highlighter-rouge&quot;&gt;Check Pods Manifest.lock&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Copy Pods Resources&lt;/code&gt;, 以及&lt;code class=&quot;highlighter-rouge&quot;&gt;Embeded Pods Frameworks&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/28/cocoapods-entirely-remove/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/28/cocoapods-entirely-remove/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>CocoaPod</category>
        
        
      </item>
    
      <item>
        <title>nodejs中package.json中的字段说明</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;packagejson&quot;&gt;package.json中的字段说明&lt;/h2&gt;

&lt;p&gt;package.json文件可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;创建&lt;/p&gt;

&lt;p&gt;一个package.json文件通常有以下字段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;name —— 包的名称，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格&lt;/li&gt;
  &lt;li&gt;description —— 包的简要说明&lt;/li&gt;
  &lt;li&gt;version —— 包的版本&lt;/li&gt;
  &lt;li&gt;author —— 包的作者&lt;/li&gt;
  &lt;li&gt;contributors —— 贡献者数组，数组每一项为一个包含一个贡献者资料的对象&lt;/li&gt;
  &lt;li&gt;dependencies —— 包的依赖，为一个对象，对象的属性为包名称，属性值为版本号&lt;/li&gt;
  &lt;li&gt;devDependencies —— 开发环境下的包依赖，为一个对象，对象的属性为包名称，属性值为版本号&lt;/li&gt;
  &lt;li&gt;keywords —— 关键字数组，通常用于搜索&lt;/li&gt;
  &lt;li&gt;repository —— 仓库托管地址，通常为一个包含type（仓库的类型，如：git）和 url（仓库的地址）的对象&lt;/li&gt;
  &lt;li&gt;main —— 包的入口文件，如不指定，则默认为根目录下的index.js或index.node&lt;/li&gt;
  &lt;li&gt;bin —— 可执行文件的路径&lt;/li&gt;
  &lt;li&gt;bugs —— 提交bug的地址&lt;/li&gt;
  &lt;li&gt;maintainers —— 维护者数组，数组每一项为一个包含一个维护者资料的对象&lt;/li&gt;
  &lt;li&gt;licenses —— 许可证数组，数组每一项为一个包含type（许可证的名称）和url（链接到许可证文本的地址）的对象&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/06/explaination-for-package-json/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/06/explaination-for-package-json/</guid>
        
        <category>npm nodejs</category>
        
        
      </item>
    
      <item>
        <title>如何在npm上发布一个包</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;我们可以从npm仓库上安装含有package.json文件的目录作为一个包,
当然也可以将一个含有package.json文件的目录作为一个包发布至npm仓库.&lt;/p&gt;

&lt;p&gt;下面就介绍一下如何发布包至npm仓库&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;发布前的必要步骤&lt;/h3&gt;

&lt;h4 id=&quot;npm&quot;&gt;创建一个npm用户&lt;/h4&gt;

&lt;p&gt;想要发布包, 你必须在npm仓库上有一个用户.
如果你还没有创建过, 执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm adduser&lt;/code&gt;, 或者可以在&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm仓库的网站&lt;/a&gt;上创建.&lt;/p&gt;

&lt;h4 id=&quot;npm-1&quot;&gt;登录你的npm帐号&lt;/h4&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm login&lt;/code&gt;登录,
登录后可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm whoami&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config ls&lt;/code&gt;来查看你的用户和权限信息&lt;/p&gt;

&lt;h3 id=&quot;npm-2&quot;&gt;发布npm包&lt;/h3&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;发布你的包, 包的名称在package.json的name里定义, &lt;a href=&quot;http://www.vanadis.cn/2016/07/06/explaination-for-package-json/&quot;&gt;点这里查看package.json中各字段的含义&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;需要注意, 除了&lt;em&gt;.gitignore&lt;/em&gt;或者&lt;em&gt;.npmignore&lt;/em&gt;中定义的忽略, 目录中所有的文件都会被发布&lt;/p&gt;

&lt;p&gt;发布完后, 可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;https://npmjs.com/package/&amp;lt;package&amp;gt;&lt;/code&gt;查看你新发布的包的信息&lt;/p&gt;

&lt;h3 id=&quot;npm-3&quot;&gt;更新npm包&lt;/h3&gt;

&lt;p&gt;修改你的包中的package.json中的&lt;em&gt;version&lt;/em&gt;版本号, &lt;a href=&quot;http://www.vanadis.cn/2016/07/06/explaination-for-package-json/&quot;&gt;点这里查看版本号的含义&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;发布你的更新包&lt;/p&gt;

&lt;p&gt;发布完后, 可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;https://npmjs.com/package/&amp;lt;package&amp;gt;&lt;/code&gt;查看你新发布的包的信息, 可以看到版本号的变化&lt;/p&gt;

&lt;p&gt;需要注意, 在npm仓库网站上你发布的包中, 显示的readme中的内容只有在版本号更新的发布操作下才会更新&lt;/p&gt;

&lt;h3 id=&quot;npm-4&quot;&gt;下架npm包&lt;/h3&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm unpublish&lt;/code&gt;下架你的包&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;注意事项&lt;/h3&gt;

&lt;p&gt;由于众所周知的网络原因，react-native命令行从npm官方源拖代码时会遇上麻烦。
一般开发时需要npm仓库源替换为国内镜像：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry https://registry.npm.taobao.org --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set disturl https://npm.taobao.org/dist --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是发布包的时候如果不切换回默认配置, 在发布时会报错,&lt;/p&gt;

&lt;p&gt;故需要将仓库源替换回默认源&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry http://registry.npmjs.org --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set disturl http://npmjs.org/dist --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;更详细的内容, 可以查阅&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm官方文档&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/05/how-to-publish-a-package-to-npm/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/05/how-to-publish-a-package-to-npm/</guid>
        
        <category>npm nodejs</category>
        
        
      </item>
    
      <item>
        <title>全栈(js向)相关内容学习日志</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;2016-2-16&lt;/h3&gt;

&lt;p&gt;开始学习nodejs, 深入理解了nodejs机制, 以及npm命令&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2016-2-17&lt;/h3&gt;

&lt;p&gt;安装了nodejs, 并搭建了nodejs express 4.x框架web工程&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2016-2-20&lt;/h3&gt;

&lt;p&gt;加入了log4js日志, 并调整了各文件目录位置&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2016-2-22&lt;/h3&gt;

&lt;p&gt;开始学习并实践gulp命令及插件&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2016-3-2&lt;/h3&gt;

&lt;p&gt;在搭建的nodejs express 4.x框架web工程中加入gulp less编译, css/js合并, css/js压缩, 生成文件版本号, 打包等构建插件内容&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;2016-3-5&lt;/h3&gt;

&lt;p&gt;开始学习webpack并实践webpack命令及插件&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;2016-3-18&lt;/h3&gt;

&lt;p&gt;在搭建的nodejs express 4.x框架web工程中加入webpack管理js入口, 业务及插件模块等, 学习并实践了webpack-dev-server进行前端开发&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;2016-3-22&lt;/h3&gt;

&lt;p&gt;学习并实践webpack配置文件版本号, 如何打包前端js,&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;2016-3-26&lt;/h3&gt;

&lt;p&gt;学习并实践模块数据库mockjs&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;2016-3-28&lt;/h3&gt;

&lt;p&gt;学习并实践nodejs开发服务器插件nodemon, 以及开发环境参数配置&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;2016-4-2&lt;/h3&gt;

&lt;p&gt;学习并实践nodejs生产服务器插件pm2机制, pm2命令, 以及生产环境参数配置, 如何部署等&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;2016-4-10&lt;/h3&gt;

&lt;p&gt;在公司构建大前端架构雏形, 开发模式完全分离, 分为前端(浏览器客户端层, 服务端路由控制与视图层)与后端(服务端业务层与数据层)&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;2016-4-21&lt;/h3&gt;

&lt;p&gt;实践并优化了webpack common-chunk插件的使用配置&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;2016-4-30&lt;/h3&gt;

&lt;p&gt;学习并实践了webpack stats的使用&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;2016-5-4&lt;/h3&gt;

&lt;p&gt;学习并尝试了react-flux&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;2016-5-12&lt;/h3&gt;

&lt;p&gt;学习并尝试了react-redux&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;2016-5-16&lt;/h3&gt;

&lt;p&gt;学习并实践了es6&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;2016-5-18&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native ios版环境部署&lt;/p&gt;

&lt;h3 id=&quot;section-18&quot;&gt;2016-5-28&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native样式及布局控制&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;2016-6-5&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native ios版基本组件&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;2016-6-7&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native ios版打包部署&lt;/p&gt;

&lt;h3 id=&quot;section-21&quot;&gt;2016-6-10&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native android版本环境部署&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;2016-6-12&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native android版基本组件&lt;/p&gt;

&lt;h3 id=&quot;section-23&quot;&gt;2016-6-16&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native实现launchImage及splashScreen&lt;/p&gt;

&lt;h3 id=&quot;section-24&quot;&gt;2016-6-20&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native使用iconfont&lt;/p&gt;

&lt;h3 id=&quot;section-25&quot;&gt;2016-6-22&lt;/h3&gt;

&lt;p&gt;学习并了解了react-native中pt与ps设计图中px的关系&lt;/p&gt;

&lt;h3 id=&quot;section-26&quot;&gt;2016-6-25&lt;/h3&gt;

&lt;p&gt;学习并实践了如何新增, 编辑及生成iconfont字库, 如何重命名字库等&lt;/p&gt;

&lt;h3 id=&quot;section-27&quot;&gt;2016-6-26&lt;/h3&gt;

&lt;p&gt;学习并实践了如何快速对设计图上进行测距及标注&lt;/p&gt;

&lt;h3 id=&quot;section-28&quot;&gt;2016-6-30&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native使用自定义iconfont&lt;/p&gt;

&lt;h3 id=&quot;section-29&quot;&gt;2016-7-1&lt;/h3&gt;

&lt;p&gt;学习并实践了如何发布npm包&lt;/p&gt;

&lt;h3 id=&quot;section-30&quot;&gt;2016-7-2&lt;/h3&gt;

&lt;p&gt;整理了需关注, 使用, 研究源代码及自实现的第三方组件列表&lt;/p&gt;

&lt;h3 id=&quot;section-31&quot;&gt;2016-7-3&lt;/h3&gt;

&lt;p&gt;查看了TouchOpacity及相关的部分源码&lt;/p&gt;

&lt;h3 id=&quot;section-32&quot;&gt;2016-7-5&lt;/h3&gt;

&lt;p&gt;完成编写react-native-smart-button初版, 支持opacity, highlight, 并实现了blur(ios)点击模糊效果
了解了npm发布package&lt;/p&gt;

&lt;h2 id=&quot;section-33&quot;&gt;2016-7-6&lt;/h2&gt;

&lt;p&gt;查看了react-native-tab-navigator源码&lt;/p&gt;

&lt;h2 id=&quot;section-34&quot;&gt;2016-7-7&lt;/h2&gt;

&lt;p&gt;查看了react-native-splash-screen源码&lt;/p&gt;

&lt;h2 id=&quot;section-35&quot;&gt;2016-7-11&lt;/h2&gt;

&lt;p&gt;编写实现了自定义反馈效果按钮组件react-native-smart-button&lt;/p&gt;

&lt;h2 id=&quot;section-36&quot;&gt;2016-7-12&lt;/h2&gt;

&lt;p&gt;开始阅读ios9应用开发入门经典, 补充ios原生开发(swift)的知识, 为之后编写与原生模块交互的自定义组件作准备&lt;/p&gt;

&lt;h2 id=&quot;section-37&quot;&gt;2016-7-14&lt;/h2&gt;

&lt;p&gt;优化自定义反馈效果按钮组件react-native-smart-button&lt;/p&gt;

&lt;h2 id=&quot;section-38&quot;&gt;2016-7-16&lt;/h2&gt;

&lt;p&gt;开始阅读ios编程(第4版), 补充ios原生开发(objective-c)的知识, 为之后编写与原生模块交互的自定义组件作准备&lt;/p&gt;

&lt;h2 id=&quot;section-39&quot;&gt;2016-7-17&lt;/h2&gt;

&lt;p&gt;编写实现了九宫格组件react-native-smart-sudoku-grid&lt;/p&gt;

&lt;h2 id=&quot;section-40&quot;&gt;2016-7-18&lt;/h2&gt;

&lt;p&gt;开始阅读Android权威指南(第2版), 补充android原生开发的知识, 为之后编写与原生模块交互的自定义组件作准备&lt;/p&gt;

&lt;h2 id=&quot;section-41&quot;&gt;2016-7-19&lt;/h2&gt;

&lt;p&gt;编写实现了徽章组件react-native-smart-badge&lt;/p&gt;

&lt;h2 id=&quot;section-42&quot;&gt;2016-7-20&lt;/h2&gt;

&lt;p&gt;学习并尝试实践编写react-native原生ios组件&lt;/p&gt;

&lt;h2 id=&quot;section-43&quot;&gt;2016-7-21&lt;/h2&gt;

&lt;p&gt;编写实现了touch-id指纹验证组件react-native-smart-touch-id&lt;/p&gt;

&lt;h2 id=&quot;section-44&quot;&gt;2016-7-22&lt;/h2&gt;

&lt;p&gt;编写实现了角标组件react-native-smart-corner-label&lt;/p&gt;

&lt;h2 id=&quot;section-45&quot;&gt;2016-7-27&lt;/h2&gt;

&lt;p&gt;修正了按钮组件react-native-smart-button中使用blur模糊阴影功能有机率会报错的问题&lt;/p&gt;

&lt;h2 id=&quot;section-46&quot;&gt;2016-7-28&lt;/h2&gt;

&lt;p&gt;编写实现了手势密码组件react-native-smart-gesture-password&lt;/p&gt;

&lt;h2 id=&quot;section-47&quot;&gt;2016-7-29&lt;/h2&gt;
&lt;p&gt;在角标组件react-native-smart-corner-label中增加了角标可指定显示在左边和右边的功能
在按钮组件react-native-smart-button中增加了显示加载状态的功能&lt;/p&gt;

&lt;p&gt;编写实现了手势密码组件react-native-smart-gesture-password&lt;/p&gt;

&lt;h2 id=&quot;section-48&quot;&gt;2016-8-1&lt;/h2&gt;
&lt;p&gt;修改了按钮组件react-native-smart-button, 增加了对onLayout事件的支持&lt;/p&gt;

&lt;h2 id=&quot;section-49&quot;&gt;2016-8-2&lt;/h2&gt;
&lt;p&gt;修改了徽章组件react-native-smart-badge, 增加了允许限制最长距离, 超长后自定义显示(例如显示…)的支持&lt;/p&gt;

&lt;h2 id=&quot;section-50&quot;&gt;2016-8-4&lt;/h2&gt;
&lt;p&gt;编写实现了抛物线(主要用于购物车)组件react-native-smart-parabola&lt;/p&gt;

&lt;h2 id=&quot;section-51&quot;&gt;2016-8-6&lt;/h2&gt;
&lt;p&gt;优化了抛物线(主要用于购物车)组件react-native-smart-parabola&lt;/p&gt;

&lt;h2 id=&quot;section-52&quot;&gt;2016-8-10&lt;/h2&gt;
&lt;p&gt;编写实现了隐私文本组件react-native-smart-security-text&lt;/p&gt;

&lt;h2 id=&quot;section-53&quot;&gt;2016-8-15&lt;/h2&gt;
&lt;p&gt;编写实现了加载屏组件react-native-smart-splash-screen&lt;/p&gt;

&lt;h2 id=&quot;section-54&quot;&gt;2016-8-16&lt;/h2&gt;
&lt;p&gt;优化了加载屏组件react-native-smart-splash-screen(android部分)&lt;/p&gt;

&lt;h2 id=&quot;section-55&quot;&gt;2016-8-20&lt;/h2&gt;
&lt;p&gt;阅读ListView, ScrollView源码&lt;/p&gt;

&lt;h2 id=&quot;section-56&quot;&gt;2016-8-24&lt;/h2&gt;
&lt;p&gt;对ListView及ScrollView的容器高度, 内容高度以及滚动距离作了验证&lt;/p&gt;

&lt;h2 id=&quot;section-57&quot;&gt;2016-8-30&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-timer-enhance生命周期内安全移除timer组件&lt;/p&gt;

&lt;h2 id=&quot;section-58&quot;&gt;2016-9-6&lt;/h2&gt;
&lt;p&gt;编写实现了react-native-smart-pull-to-refresh下拉刷新, 上拉加载组件&lt;/p&gt;

&lt;h2 id=&quot;section-59&quot;&gt;2016-9-7&lt;/h2&gt;
&lt;p&gt;补充了react-native-smart-pull-to-refresh android遗漏的自动加载更多功能&lt;/p&gt;

&lt;h2 id=&quot;section-60&quot;&gt;2016-9-8&lt;/h2&gt;
&lt;p&gt;修正了在0.30+版本上react-native-smart-pull-to-refresh下拉刷新, 上拉加载组件的兼容性问题
编写了针对自定义组件集的完整示例&lt;/p&gt;

&lt;h2 id=&quot;section-61&quot;&gt;2016-9-12&lt;/h2&gt;
&lt;p&gt;实践了react-native版本升级
兼容支持0.33版本react-native-smart-pull-to-refresh&lt;/p&gt;

&lt;h2 id=&quot;section-62&quot;&gt;2016-9-18&lt;/h2&gt;
&lt;p&gt;修正了react-native-smart-splash-screen(android部分)背景图在透明View下永远显示的问题&lt;/p&gt;

&lt;h2 id=&quot;section-63&quot;&gt;2016-9-20&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-toast帮助信息提示组件&lt;/p&gt;

&lt;h2 id=&quot;section-64&quot;&gt;2016-9-21&lt;/h2&gt;
&lt;p&gt;优化react-native-smart-toast自定义功能&lt;/p&gt;

&lt;h2 id=&quot;section-65&quot;&gt;2016-9-22&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-loading-spinner-overlay加载信息提示组件&lt;/p&gt;

&lt;h2 id=&quot;section-66&quot;&gt;2016-10-26&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-barcode扫码组件&lt;/p&gt;

&lt;h2 id=&quot;section-67&quot;&gt;2016-11-3&lt;/h2&gt;
&lt;p&gt;更新了react-native-smart-pull-to-refresh-listview组件, 增加了可选的, 超出屏幕可视范围的行进行内存回收的功能&lt;/p&gt;

&lt;h2 id=&quot;section-68&quot;&gt;2016-11-7&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-image-loader图片缓存懒加载组件&lt;/p&gt;

&lt;h2 id=&quot;section-69&quot;&gt;2016-11-12&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-app-event-listener-enhance生命周期内安全移除设备事件组件&lt;/p&gt;

&lt;h2 id=&quot;section-70&quot;&gt;2016-11-15&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-amap-location高德地图定位SDK组件&lt;/p&gt;

&lt;h2 id=&quot;section-71&quot;&gt;2016-11-23&lt;/h2&gt;
&lt;p&gt;编写了react-native-smart-amap高德地图SDK组件&lt;/p&gt;

&lt;h2 id=&quot;section-72&quot;&gt;2016-11-26&lt;/h2&gt;
&lt;p&gt;更新react-native-smart-amap-location高德地图定位SDK组件, 加入后台连续定位功能&lt;/p&gt;

&lt;h2 id=&quot;section-73&quot;&gt;2016-11-30&lt;/h2&gt;
&lt;p&gt;更新react-native-smart-pull-to-refresh-listview, 修正bug&lt;/p&gt;

&lt;h2 id=&quot;section-74&quot;&gt;2016-12-5&lt;/h2&gt;
&lt;p&gt;更新react-native-smart-pull-to-refresh-listview, 增加android支持sticky header&lt;/p&gt;

&lt;h2 id=&quot;section-75&quot;&gt;2016-12-8&lt;/h2&gt;
&lt;p&gt;更新react-native-smart-pull-to-refresh-listview,
增加android支持sticky header与pull to refresh混合使用,
修正android有时onSwipe返回坐标值不正确的问题,
修正ios/android在使用autoLoad加载更多模式下, onContentSizeChange中计算容器内容宽度逻辑判断条件不正确的问题&lt;/p&gt;

&lt;h2 id=&quot;section-76&quot;&gt;2016-12-15&lt;/h2&gt;
&lt;p&gt;增加了react-native-smart-sortable-sudoku-grid&lt;/p&gt;

&lt;h2 id=&quot;section-77&quot;&gt;2016-12-17&lt;/h2&gt;
&lt;p&gt;更新react-native-smart-pull-to-refresh-listview
调整了onRefresh执行时机, 修正了在请求数据返回速度极快时, 下拉刷新动画无法显示正常的问题&lt;/p&gt;

&lt;h2 id=&quot;section-78&quot;&gt;2016-12-21&lt;/h2&gt;
&lt;p&gt;尝试通过了, 使用rn提供的XMLHttpRequest+FormData方式上传文件(官方示例只提供了访问相册中的照片, 而同时使用react-native-fs可以支持上传任意可访问目录下的文件),
并且使图片上传前的生成裁剪缩放后的临时文件, 再上传临时文件的方式变得可行.&lt;/p&gt;

&lt;h2 id=&quot;section-79&quot;&gt;2016-12-23&lt;/h2&gt;
&lt;p&gt;新增了react-native-smart-alipay支付宝SDK插件&lt;/p&gt;

&lt;h2 id=&quot;section-80&quot;&gt;2017-1-10&lt;/h2&gt;
&lt;p&gt;尝试实现了多文件线程控制上传功能模块, 后续考虑封装组件&lt;/p&gt;

&lt;h2 id=&quot;section-81&quot;&gt;2017-1-27&lt;/h2&gt;
&lt;p&gt;尝试使用react-native-navigation&lt;/p&gt;

&lt;h2 id=&quot;section-82&quot;&gt;2017-1-28&lt;/h2&gt;
&lt;p&gt;尝试最新版本的源生应用内嵌react-native&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/01/react-native-learning-log/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/01/react-native-learning-log/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native使用iconfont来替代icon图片</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;众所周知, 图片是有诸多优点的，然而目前在网站以及APP设计这行业面临各种各样的挑战。
图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低性能的。
图片还有一个缺点就是不能很好的进行“缩放”，
因此，有时候在“响应式设计”中需要使用图像的最好解决方案就是不去使用图片。&lt;/p&gt;

&lt;h3 id=&quot;iconfont&quot;&gt;为什么要使用iconfont(字体图标)&lt;/h3&gt;

&lt;p&gt;点击&lt;a href=&quot;http://www.w3cplus.com/css3/icon-fonts.html&quot;&gt;这里&lt;/a&gt;或[这里]了解使用iconfont(字体图片)的优缺点&lt;/p&gt;

&lt;h3 id=&quot;iosiconfont&quot;&gt;ios实现iconfont&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装第三方组件react-native-vector-icons &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install react-native-vector-icons --save&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;组件内置了如下字库:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Entypo by Daniel Bruce (411 icons)&lt;/li&gt;
      &lt;li&gt;EvilIcons by Alexander Madyankin &amp;amp; Roman Shamin (v1.8.0, 70 icons)&lt;/li&gt;
      &lt;li&gt;FontAwesome by Dave Gandy (v4.6.3, 634 icons)&lt;/li&gt;
      &lt;li&gt;Foundation by ZURB, Inc. (v3.0, 283 icons)&lt;/li&gt;
      &lt;li&gt;Ionicons by Ben Sperry (v3.0.0, 859 icons)&lt;/li&gt;
      &lt;li&gt;MaterialIcons by Google, Inc. (v2.2.3, 932 icons)&lt;/li&gt;
      &lt;li&gt;Octicons by Github, Inc. (v3.5.0, 166 icons)&lt;/li&gt;
      &lt;li&gt;Zocial by Sam Collins (v1.0, 100 icons)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;也可以使用自定义的字库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用组件内置字库, 需要执行如下步骤:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/react-native-vector-icons&lt;/code&gt;目录, 并将&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts&lt;/code&gt;目录(或者只是你需要的一个字库文件)拖至Xcode中的工程里.
需要注意的是加入时需要保证勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Add to targets&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Create groups&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;, 新增一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts provided by application&lt;/code&gt;属性, 值设置为加入的字库文件, 如下图所示:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/378279/12421498/2db1f93a-be88-11e5-89c8-2e563ba6251a.png&quot;&gt;Fonts provided by application&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用自定义字库, 需要执行如下步骤:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;需要自行生成一个*.ttf字库文件, &lt;a href=&quot;http://www.iconfont.cn/&quot;&gt;点这里查看如何快速获取自定义字库&lt;/a&gt;,&lt;/p&gt;

        &lt;p&gt;字库文件中的内容, 包含字库名称, 每项icon矢量图等都可以自定义(下面的示例中定义为’iconfont’), &lt;a href=&quot;http://www.vanadis.cn/2016/06/30/font-creator/&quot;&gt;点这里查看如何快速修改字库&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;将自定义生成的字库文件(假设文件名为font.ttf)拖至Xcode中的工程里,&lt;/p&gt;

        &lt;p&gt;需要注意的是加入时需要保证勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Add to targets&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Create groups&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;, 新增一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts provided by application&lt;/code&gt;属性, 值设置为加入的字库文件, 同步骤2&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;androidiconfont&quot;&gt;android实现iconfont&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装第三方组件react-native-vector-icons &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install react-native-vector-icons --save&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;组件内置了如下字库:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Entypo by Daniel Bruce (411 icons)&lt;/li&gt;
      &lt;li&gt;EvilIcons by Alexander Madyankin &amp;amp; Roman Shamin (v1.8.0, 70 icons)&lt;/li&gt;
      &lt;li&gt;FontAwesome by Dave Gandy (v4.6.3, 634 icons)&lt;/li&gt;
      &lt;li&gt;Foundation by ZURB, Inc. (v3.0, 283 icons)&lt;/li&gt;
      &lt;li&gt;Ionicons by Ben Sperry (v3.0.0, 859 icons)&lt;/li&gt;
      &lt;li&gt;MaterialIcons by Google, Inc. (v2.2.3, 932 icons)&lt;/li&gt;
      &lt;li&gt;Octicons by Github, Inc. (v3.5.0, 166 icons)&lt;/li&gt;
      &lt;li&gt;Zocial by Sam Collins (v1.0, 100 icons)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;也可以使用自定义的字库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用组件内置字库, 需要执行如下步骤:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/react-native-vector-icons&lt;/code&gt;目录, 并将&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts&lt;/code&gt;目录中的字库文件拖至&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/assets/fonts&lt;/code&gt;里.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用自定义字库, 需要执行如下步骤:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;需要自行生成一个*.ttf字库文件, &lt;a href=&quot;http://www.iconfont.cn/&quot;&gt;点这里查看如何快速获取自定义字库&lt;/a&gt;,&lt;/p&gt;

        &lt;p&gt;字库文件中的内容, 包含字库名称, 每项icon矢量图等都可以自定义(下面的示例中定义为’iconfont’), &lt;a href=&quot;http://www.vanadis.cn/2016/06/30/font-creator/&quot;&gt;点这里查看如何快速修改字库&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;将自定义生成的字库文件(假设文件名为font.ttf)拖至&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/assets/fonts&lt;/code&gt;里,&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;效果展示&lt;/h3&gt;

&lt;h3 id=&quot;react-native&quot;&gt;react-native代码示例&lt;/h3&gt;

&lt;h4 id=&quot;section-1&quot;&gt;使用内置字库&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Icon from &#39;react-native-vector-icons/Ionicons&#39;;

function ExampleView(props) {
  return (&amp;lt;Icon name=&quot;ios-person&quot; size={30} color=&quot;#4F8EF7&quot; /&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;使用自定义字库&lt;/h4&gt;

&lt;h4 id=&quot;ios&quot;&gt;ios&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { createIconSet } from &#39;react-native-vector-icons&#39;;
const glyphMap = {
  &#39;mui-nav-right&#39;: 58755,
  &#39;mui-nav-left&#39;: 58481,
};
const MuiIcon = createIconSet(glyphMap, &#39;iconfont&#39;);

function ExampleView(props) {
    return (&amp;lt;MuiIcon size={20} name={&#39;mui-nav-left&#39;} color={&#39;#E5E5E5&#39;}/&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;android&quot;&gt;android&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { createIconSet } from &#39;react-native-vector-icons&#39;;
const glyphMap = {
  &#39;mui-nav-right&#39;: 58755,
  &#39;mui-android-nav-left&#39;: 58481,
  &#39;mui-voicer&#39;: 58162,
};
const MuiIcon = createIconSet(glyphMap, &#39;iconfont&#39;, &#39;mui.ttf&#39;);

function ExampleView(props) {
    return (&amp;lt;MuiIcon size={20} name={&#39;mui-android-nav-left&#39;} color={&#39;#E5E5E5&#39;}/&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;注意事项&lt;/h3&gt;

&lt;p&gt;示例中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;mui-nav-right&#39;: 58755&lt;/code&gt;, &lt;em&gt;mui-nav-right&lt;/em&gt;为icon的名称, 可以自定义, 使用时赋值给&lt;em&gt;name&lt;/em&gt;,
58755为这个字库文件中对应icon的16进制表示.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/01/react-native-iconfont/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/01/react-native-iconfont/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native实现launchImage和splash-screen</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;splashscreen&quot;&gt;为什么实现splashScreen&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;对于ios版本, 点击桌面的app icon后, 自动加载launchImage, launchImage加载完毕后就会进入应用首屏,
虽然launchImage加载持续时间可以手动设置, 但是却没有关闭launchImage的api, 如果希望在加载首屏前执行一
些逻辑(例如, 网络请求一些数据), 在这些逻辑执行完毕之前用户看不见首屏, 仍然只能看到lauchImage展现的部分,
是无法实现的. 因此, ios需要自行实现类似android的splashScreen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于android版本, 源生支持实现splashScreen, 但要实现类似ios的launchImage效果, 需要对AndroidManifest.
xml文件进行微调.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ioslaunchimage&quot;&gt;ios实现launchImage&lt;/h2&gt;
&lt;p&gt;ios源生支持实现launchImage, 可以点&lt;a href=&quot;http://www.vanadis.cn/2016/06/30/ios-launch-image&quot;&gt;这里&lt;/a&gt;了解, 这里就不展开了.&lt;/p&gt;

&lt;h2 id=&quot;iossplashscreen&quot;&gt;ios实现splashScreen&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装组件&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-splashscreen&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @remobile/react-native-splashscreen --save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;RCTSplashScreen.xcodeproj&lt;/code&gt;拖入你的Xode工程的&lt;code class=&quot;highlighter-rouge&quot;&gt;Libraries&lt;/code&gt;下.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击你的主工程文件, 选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;, 并在工程Products目录下找到&lt;code class=&quot;highlighter-rouge&quot;&gt;RCTSplashScreen.xcodeproj&lt;/code&gt;, 将其中包含的&lt;code class=&quot;highlighter-rouge&quot;&gt;libRCTSplashScreen.a&lt;/code&gt;拖入.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Builder Settings&lt;/code&gt;中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;Header Search Paths&lt;/code&gt;, 确认其中包含&lt;code class=&quot;highlighter-rouge&quot;&gt;$(SRCROOT)/../../../react-native/React&lt;/code&gt;(recursive).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Builder Settings&lt;/code&gt;中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;Header Search Paths&lt;/code&gt;,  确认其中包含&lt;code class=&quot;highlighter-rouge&quot;&gt;$(SRCROOT)/../node_modules/@remobile/react-native-splashscreen/ios/RCTSplashScreen&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;删除工程里的LaunchScreen.xib&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将组件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;SplashScreenResource&lt;/code&gt;目录拖入工程, 确认类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;groups&lt;/code&gt;, 并且&lt;code class=&quot;highlighter-rouge&quot;&gt;Add Targets&lt;/code&gt;选中, 如果希望使用不同的splash图片, 可以替换&lt;code class=&quot;highlighter-rouge&quot;&gt;splash.png&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;工程里找到AppDelegate.m&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
#import &quot;RCTSplashScreen.h&quot; //&amp;lt;--- 新增导入
...
RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@&quot;KitchenSink&quot;
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  [RCTSplashScreen show:rootView]; //&amp;lt;--- 新增显示splashScreen

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [[UIViewController alloc] init];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  return YES;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;androidlaunchimage&quot;&gt;android实现launchImage&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;准备一张背景图片, 自定义命名(比如命名为splash), 自己选择图片格式, 放在drawable目录下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置strings.xml&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;resources&amp;gt;

    &amp;lt;!--&amp;amp;lt;!&amp;amp;ndash; Base application theme. &amp;amp;ndash;&amp;amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&amp;gt;--&amp;gt;
        &amp;lt;!--&amp;amp;lt;!&amp;amp;ndash; Customize your theme here. &amp;amp;ndash;&amp;amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;/style&amp;gt;--&amp;gt;

    &amp;lt;style name=&quot;AppTheme&quot; parent=&quot;@android:style/Theme.Black&quot;&amp;gt;
        &amp;lt;item name=&quot;android:windowBackground&quot;&amp;gt;@drawable/splash&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;android:windowNoTitle&quot;&amp;gt;true&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;android:windowFullscreen&quot;&amp;gt;true&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;android:windowContentOverlay&quot;&amp;gt;@null&amp;lt;/item&amp;gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/resources&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;配置AndroidManifest.xml&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.helloreactnative&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot;&amp;gt;

    &amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&amp;gt;

    &amp;lt;uses-sdk
        android:minSdkVersion=&quot;16&quot;
        android:targetSdkVersion=&quot;22&quot; /&amp;gt;

    &amp;lt;application
      android:allowBackup=&quot;true&quot;
      android:label=&quot;@string/app_name&quot;
      android:icon=&quot;@mipmap/ic_launcher&quot;&amp;gt;
      &amp;lt;activity
        android:name=&quot;.MainActivity&quot;
        android:label=&quot;@string/app_name&quot;
        android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot;
          android:theme=&quot;@style/AppTheme&quot;&amp;gt;
        &amp;lt;intent-filter&amp;gt;
            &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;
            &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;
        &amp;lt;/intent-filter&amp;gt;
      &amp;lt;/activity&amp;gt;
      &amp;lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&amp;gt;
    &amp;lt;/application&amp;gt;

&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;androidsplashscreen&quot;&gt;android实现splashScreen&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装组件&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-splashscreen&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @remobile/react-native-splashscreen --save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在工程中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;android/settings.gradle&lt;/code&gt;, 加入如下:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
include &#39;:react-native-splashscreen&#39;
project(&#39;:react-native-splashscreen&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/@remobile/react-native-splashscreen/android&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;在工程中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;, 加入如下:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
dependencies {
    ...
    compile project(&#39;:react-native-splashscreen&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果希望使用不同的splash图片, 替换&lt;code class=&quot;highlighter-rouge&quot;&gt;res/drawable/splash.png&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在MainActivity.java中注册模块&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import com.remobile.splashscreen.*;  // &amp;lt;--- 导入包

public class MainActivity extends Activity implements DefaultHardwareBackBtnHandler {
  ......
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    mReactInstanceManager = ReactInstanceManager.builder()
      .setApplication(getApplication())
      .setBundleAssetName(&quot;index.android.bundle&quot;)
      .setJSMainModuleName(&quot;index.android&quot;)
      .addPackage(new MainReactPackage())
      .addPackage(new RCTSplashScreenPackage(this))              // &amp;lt;------ 加入splashScreen的package
      .setUseDeveloperSupport(BuildConfig.DEBUG)
      .setInitialLifecycleState(LifecycleState.RESUMED)
      .build();

    mReactRootView.startReactApplication(mReactInstanceManager, &quot;ExampleRN&quot;, null);

    setContentView(mReactRootView);
  }

  ......
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;效果展示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vanadis.cn/img/ios-splash-screen.gif&quot; alt=&quot;ios-splash-screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vanadis.cn/img/android-splash-screen.gif&quot; alt=&quot;android-splash-screen&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;react-nativesplashscreen&quot;&gt;react-native中关闭splashScreen&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;use strict&#39;;
var React = require(&#39;react-native&#39;);
var {
    AppRegistry,
    View,
    Text,
} = React;

var SplashScreen = require(&#39;@remobile/react-native-splashscreen&#39;);  //导入包

var KitchenSink = React.createClass({
    componentDidMount: function() {
        SplashScreen.hide();    //调用api隐藏splashScreen
    },
    render() {
        return(
            &amp;lt;View&amp;gt;
                &amp;lt;Text&amp;gt;
                    fangyunjiang is a good developer!
                &amp;lt;/Text&amp;gt;
            &amp;lt;/View&amp;gt;
        );
    }
});

AppRegistry.registerComponent(&#39;KitchenSink&#39;, () =&amp;gt; KitchenSink);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/30/react-native-splash-screen/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/30/react-native-splash-screen/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native的尺寸pt与psd设计稿中的px的转换规则</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;pt-point&quot;&gt;pt (point，磅)：&lt;/h3&gt;
&lt;p&gt;是一个物理长度单位，指的是72分之一英寸。&lt;/p&gt;

&lt;h3 id=&quot;px-pixel&quot;&gt;px (pixel，像素)：&lt;/h3&gt;
&lt;p&gt;是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果px要换算成物理长度，需要指定精度DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有DPI可选。Windows系统默认是96dpi，Apple系统默认是72dpi。&lt;/p&gt;

&lt;h3 id=&quot;em&quot;&gt;em(相对长度单位，相对于当前对象内文本的字体尺寸)：&lt;/h3&gt;
&lt;p&gt;是一个相对长度单位，最初是指字母M的宽度，故名em。现指的是字符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em等。通常1em=16px。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;字号：&lt;/h3&gt;
&lt;p&gt;是中文字库中特有的一种单位，以中文代号表示特定的磅值pt，便于记忆、表述。&lt;/p&gt;

&lt;p&gt;pt和px的换算公式可以根据pt的定义得出:&lt;/p&gt;

&lt;p&gt;pt=1/72(英寸), px=1/dpi(英寸)&lt;/p&gt;

&lt;p&gt;因此 pt=px*72/dpi&lt;/p&gt;

&lt;p&gt;以Windows下的96dpi来计算，pt=px&lt;em&gt;72/96=px&lt;/em&gt;3/4&lt;/p&gt;

&lt;p&gt;ios设备的物理分辨率, 逻辑分辨率, 缩放比, DPI等参数参见下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.vanadis.cn/img/ios-device-dpi.jpg&quot; alt=&quot;ios-device-dpi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;react-native中设置宽高, 以及字号所用的尺寸单位是pt, 是针对上图中的逻辑分辨率(logic point)而言的.
可以看到iphone6的物理分辨率是750&lt;em&gt;1334, 逻辑分辨率是375&lt;/em&gt;667, 缩放比为2, 假设在react-native设置宽度为10pt,
则在iphone6上实际显示为20px.&lt;/p&gt;

&lt;p&gt;因此, 假设你拿到的psd设计稿(注: ps的屏幕分辨率需设置为72像素/英寸)是基于iphone6的分辨率来做的,
则react-native中设置对象的尺寸 = 设计稿对应对象的尺寸(px) / 2.&lt;/p&gt;

&lt;p&gt;另外, 也可以&lt;a href=&quot;http://www.vanadis.cn/2016/07/06/how-to-find-mobile-device-pixel-radio/&quot;&gt;通过chrome浏览器的开发者工具查看常用移动设备的缩放比&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;最终的转换公式为:&lt;/h3&gt;
&lt;p&gt;react-native中设置对象的尺寸 = 设计稿对应对象的尺寸(px) / 设备缩放比&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/30/react-native-pt-px-translation/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/30/react-native-pt-px-translation/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
  </channel>
</rss>
