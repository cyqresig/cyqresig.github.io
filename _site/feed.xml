<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>绯雨闲丸 Blog</title>
    <description>关于前端开发,react-native开发,nodejs开发 | 绯雨闲丸，Web &amp; Mobile，Front-End Engineer | 这里是 @HISAME SHIZUMARU绯雨闲丸 的个人博客，与你一起发现更大的世界。</description>
    <link>http://www.vanadis.cn/</link>
    <atom:link href="http://www.vanadis.cn/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 11 Jul 2016 15:02:55 +0800</pubDate>
    <lastBuildDate>Mon, 11 Jul 2016 15:02:55 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>nodejs中package.json中的字段说明</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;packagejson&quot;&gt;package.json中的字段说明&lt;/h2&gt;

&lt;p&gt;package.json文件可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;创建&lt;/p&gt;

&lt;p&gt;一个package.json文件通常有以下字段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;name —— 包的名称，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格&lt;/li&gt;
  &lt;li&gt;description —— 包的简要说明&lt;/li&gt;
  &lt;li&gt;version —— 包的版本&lt;/li&gt;
  &lt;li&gt;author —— 包的作者&lt;/li&gt;
  &lt;li&gt;contributors —— 贡献者数组，数组每一项为一个包含一个贡献者资料的对象&lt;/li&gt;
  &lt;li&gt;dependencies —— 包的依赖，为一个对象，对象的属性为包名称，属性值为版本号&lt;/li&gt;
  &lt;li&gt;devDependencies —— 开发环境下的包依赖，为一个对象，对象的属性为包名称，属性值为版本号&lt;/li&gt;
  &lt;li&gt;keywords —— 关键字数组，通常用于搜索&lt;/li&gt;
  &lt;li&gt;repository —— 仓库托管地址，通常为一个包含type（仓库的类型，如：git）和 url（仓库的地址）的对象&lt;/li&gt;
  &lt;li&gt;main —— 包的入口文件，如不指定，则默认为根目录下的index.js或index.node&lt;/li&gt;
  &lt;li&gt;bin —— 可执行文件的路径&lt;/li&gt;
  &lt;li&gt;bugs —— 提交bug的地址&lt;/li&gt;
  &lt;li&gt;maintainers —— 维护者数组，数组每一项为一个包含一个维护者资料的对象&lt;/li&gt;
  &lt;li&gt;licenses —— 许可证数组，数组每一项为一个包含type（许可证的名称）和url（链接到许可证文本的地址）的对象&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/06/explaination-for-package-json/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/06/explaination-for-package-json/</guid>
        
        <category>nodejs</category>
        
        
      </item>
    
      <item>
        <title>如何在npm上发布一个包</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;我们可以从npm仓库上安装含有package.json文件的目录作为一个包,
当然也可以将一个含有package.json文件的目录作为一个包发布至npm仓库.&lt;/p&gt;

&lt;p&gt;下面就介绍一下如何发布包至npm仓库&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;发布前的必要步骤&lt;/h3&gt;

&lt;h4 id=&quot;npm&quot;&gt;创建一个npm用户&lt;/h4&gt;

&lt;p&gt;想要发布包, 你必须在npm仓库上有一个用户.
如果你还没有创建过, 执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm adduser&lt;/code&gt;, 或者可以在&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm仓库的网站&lt;/a&gt;上创建.&lt;/p&gt;

&lt;h4 id=&quot;npm-1&quot;&gt;登录你的npm帐号&lt;/h4&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm login&lt;/code&gt;登录,
登录后可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm whoami&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config ls&lt;/code&gt;来查看你的用户和权限信息&lt;/p&gt;

&lt;h3 id=&quot;npm-2&quot;&gt;发布npm包&lt;/h3&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;发布你的包, 包的名称在package.json的name里定义, &lt;a href=&quot;http://cyqresig.github.io/2016/07/06/explaination-for-package-json/&quot;&gt;点这里查看package.json中各字段的含义&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;需要注意, 除了&lt;em&gt;.gitignore&lt;/em&gt;或者&lt;em&gt;.npmignore&lt;/em&gt;中定义的忽略, 目录中所有的文件都会被发布&lt;/p&gt;

&lt;p&gt;发布完后, 可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;https://npmjs.com/package/&amp;lt;package&amp;gt;&lt;/code&gt;查看你新发布的包的信息&lt;/p&gt;

&lt;h3 id=&quot;npm-3&quot;&gt;更新npm包&lt;/h3&gt;

&lt;p&gt;修改你的包中的package.json中的&lt;em&gt;version&lt;/em&gt;版本号, &lt;a href=&quot;http://cyqresig.github.io/2016/07/06/explaination-for-package-json/&quot;&gt;点这里查看版本号的含义&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;发布你的更新包&lt;/p&gt;

&lt;p&gt;发布完后, 可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;https://npmjs.com/package/&amp;lt;package&amp;gt;&lt;/code&gt;查看你新发布的包的信息, 可以看到版本号的变化&lt;/p&gt;

&lt;p&gt;需要注意, 在npm仓库网站上你发布的包中, 显示的readme中的内容只有在版本号更新的发布操作下才会更新&lt;/p&gt;

&lt;h3 id=&quot;npm-4&quot;&gt;下架npm包&lt;/h3&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm unpublish&lt;/code&gt;下架你的包&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;注意事项&lt;/h3&gt;

&lt;p&gt;由于众所周知的网络原因，react-native命令行从npm官方源拖代码时会遇上麻烦。
一般开发时需要npm仓库源替换为国内镜像：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry https://registry.npm.taobao.org --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set disturl https://npm.taobao.org/dist --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是发布包的时候如果不切换回默认配置, 在发布时会报错,&lt;/p&gt;

&lt;p&gt;故需要将仓库源替换回默认源&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry http://registry.npmjs.org --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set disturl http://npmjs.org/dist --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;更详细的内容, 可以查阅&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm官方文档&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/05/how-to-publish-a-package-to-npm/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/05/how-to-publish-a-package-to-npm/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>全栈(js向)相关内容学习日志</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;2016-2-16&lt;/h3&gt;

&lt;p&gt;开始学习nodejs, 深入理解了nodejs机制, 以及npm命令&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2016-2-17&lt;/h3&gt;

&lt;p&gt;安装了nodejs, 并搭建了nodejs express 4.x框架web工程&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2016-2-20&lt;/h3&gt;

&lt;p&gt;加入了log4js日志, 并调整了各文件目录位置&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;2016-2-22&lt;/h3&gt;

&lt;p&gt;开始学习并实践gulp命令及插件&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2016-3-2&lt;/h3&gt;

&lt;p&gt;在搭建的nodejs express 4.x框架web工程中加入gulp less编译, css/js合并, css/js压缩, 生成文件版本号, 打包等构建插件内容&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;2016-3-5&lt;/h3&gt;

&lt;p&gt;开始学习webpack并实践webpack命令及插件&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;2016-3-18&lt;/h3&gt;

&lt;p&gt;在搭建的nodejs express 4.x框架web工程中加入webpack管理js入口, 业务及插件模块等, 学习并实践了webpack-dev-server进行前端开发&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;2016-3-22&lt;/h3&gt;

&lt;p&gt;学习并实践webpack配置文件版本号, 如何打包前端js,&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;2016-3-26&lt;/h3&gt;

&lt;p&gt;学习并实践模块数据库mockjs&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;2016-3-28&lt;/h3&gt;

&lt;p&gt;学习并实践nodejs开发服务器插件nodemon, 以及开发环境参数配置&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;2016-4-2&lt;/h3&gt;

&lt;p&gt;学习并实践nodejs生产服务器插件pm2机制, pm2命令, 以及生产环境参数配置, 如何部署等&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;2016-4-10&lt;/h3&gt;

&lt;p&gt;在公司构建大前端架构雏形, 开发模式完全分离, 分为前端(浏览器客户端层, 服务端路由控制与视图层)与后端(服务端业务层与数据层)&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;2016-4-21&lt;/h3&gt;

&lt;p&gt;实践并优化了webpack common-chunk插件的使用配置&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;2016-4-30&lt;/h3&gt;

&lt;p&gt;学习并实践了webpack stats的使用&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;2016-5-4&lt;/h3&gt;

&lt;p&gt;学习并尝试了react-flux&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;2016-5-12&lt;/h3&gt;

&lt;p&gt;学习并尝试了react-redux&lt;/p&gt;

&lt;h3 id=&quot;section-16&quot;&gt;2016-5-16&lt;/h3&gt;

&lt;p&gt;学习并实践了es6&lt;/p&gt;

&lt;h3 id=&quot;section-17&quot;&gt;2016-5-18&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native ios版环境部署&lt;/p&gt;

&lt;h3 id=&quot;section-18&quot;&gt;2016-5-28&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native样式及布局控制&lt;/p&gt;

&lt;h3 id=&quot;section-19&quot;&gt;2016-6-5&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native ios版基本组件&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;2016-6-7&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native ios版打包部署&lt;/p&gt;

&lt;h3 id=&quot;section-21&quot;&gt;2016-6-10&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native android版本环境部署&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;2016-6-12&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native android版基本组件&lt;/p&gt;

&lt;h3 id=&quot;section-23&quot;&gt;2016-6-16&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native实现launchImage及splashScreen&lt;/p&gt;

&lt;h3 id=&quot;section-24&quot;&gt;2016-6-20&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native使用iconfont&lt;/p&gt;

&lt;h3 id=&quot;section-25&quot;&gt;2016-6-22&lt;/h3&gt;

&lt;p&gt;学习并了解了react-native中pt与ps设计图中px的关系&lt;/p&gt;

&lt;h3 id=&quot;section-26&quot;&gt;2016-6-25&lt;/h3&gt;

&lt;p&gt;学习并实践了如何新增, 编辑及生成iconfont字库, 如何重命名字库等&lt;/p&gt;

&lt;h3 id=&quot;section-27&quot;&gt;2016-6-26&lt;/h3&gt;

&lt;p&gt;学习并实践了如何快速对设计图上进行测距及标注&lt;/p&gt;

&lt;h3 id=&quot;section-28&quot;&gt;2016-6-30&lt;/h3&gt;

&lt;p&gt;学习并实践了react-native使用自定义iconfont&lt;/p&gt;

&lt;h3 id=&quot;section-29&quot;&gt;2016-7-1&lt;/h3&gt;

&lt;p&gt;学习并实践了如何发布npm包&lt;/p&gt;

&lt;h3 id=&quot;section-30&quot;&gt;2016-7-2&lt;/h3&gt;

&lt;p&gt;整理了需关注, 使用, 研究源代码及自实现的第三方组件列表&lt;/p&gt;

&lt;h3 id=&quot;section-31&quot;&gt;2016-7-3&lt;/h3&gt;

&lt;p&gt;查看了TouchOpacity及相关的部分源码&lt;/p&gt;

&lt;h3 id=&quot;section-32&quot;&gt;2016-7-5&lt;/h3&gt;

&lt;p&gt;完成编写react-native-smart-button初版, 支持opacity, highlight, 并实现了blur(ios)点击模糊效果
了解了npm发布package&lt;/p&gt;

&lt;h2 id=&quot;section-33&quot;&gt;2016-7-6&lt;/h2&gt;

&lt;p&gt;查看了react-native-tab-navigator源码, 准备自行编写react-native-smart-tab-navigator&lt;/p&gt;

&lt;h3 id=&quot;section-34&quot;&gt;组件生态列表&lt;/h3&gt;

&lt;h4 id=&quot;ui&quot;&gt;UI&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;@react-native-component/react-native-smart-button&lt;/li&gt;
  &lt;li&gt;react-native-numberbox&lt;/li&gt;
  &lt;li&gt;react-native-parabola&lt;/li&gt;
  &lt;li&gt;react-native-calculator&lt;/li&gt;
  &lt;li&gt;react-native-speed-dial&lt;/li&gt;
  &lt;li&gt;react-native-refresh-infinite&lt;/li&gt;
  &lt;li&gt;react-native-toast&lt;/li&gt;
  &lt;li&gt;react-native-date-picker&lt;/li&gt;
  &lt;li&gt;react-native-datetime-picker&lt;/li&gt;
  &lt;li&gt;react-native-calendar&lt;/li&gt;
  &lt;li&gt;react-native-des&lt;/li&gt;
  &lt;li&gt;react-native-md5&lt;/li&gt;
  &lt;li&gt;react-native-image-animation&lt;/li&gt;
  &lt;li&gt;react-native-simple-radio-button&lt;/li&gt;
  &lt;li&gt;react-native-charts&lt;/li&gt;
  &lt;li&gt;react-native-scrollable-tab-view&lt;/li&gt;
  &lt;li&gt;react-native-animatable&lt;/li&gt;
  &lt;li&gt;react-native-spinkit&lt;/li&gt;
  &lt;li&gt;react-native-refresher&lt;/li&gt;
  &lt;li&gt;react-native-progess&lt;/li&gt;
  &lt;li&gt;react-native-collapsible&lt;/li&gt;
  &lt;li&gt;react-native-parallax&lt;/li&gt;
  &lt;li&gt;react-native-floating-label-text-input&lt;/li&gt;
  &lt;li&gt;react-native-pan-controller&lt;/li&gt;
  &lt;li&gt;react-native-pan-loader&lt;/li&gt;
  &lt;li&gt;react-native-radial-menu&lt;/li&gt;
  &lt;li&gt;react-native-animated-tabs&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-35&quot;&gt;原生能力&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;react-native-life-cycle&lt;/li&gt;
  &lt;li&gt;react-native-splashscreen&lt;/li&gt;
  &lt;li&gt;react-native-action-sheet&lt;/li&gt;
  &lt;li&gt;react-native-datetime-picker&lt;/li&gt;
  &lt;li&gt;react-native-datetime-picker&lt;/li&gt;
  &lt;li&gt;react-native-cascading-picker&lt;/li&gt;
  &lt;li&gt;react-native-toast&lt;/li&gt;
  &lt;li&gt;react-native-overlay-loading-spinner&lt;/li&gt;
  &lt;li&gt;react-native-des&lt;/li&gt;
  &lt;li&gt;react-native-md5&lt;/li&gt;
  &lt;li&gt;react-native-marquee&lt;/li&gt;
  &lt;li&gt;react-native-gallery&lt;/li&gt;
  &lt;li&gt;react-native-update&lt;/li&gt;
  &lt;li&gt;react-native-camera(cordova)&lt;/li&gt;
  &lt;li&gt;react-native-contacts(cordova)&lt;/li&gt;
  &lt;li&gt;react-native-dialogs(cordova)&lt;/li&gt;
  &lt;li&gt;eact-native-file-transfer(cordova)&lt;/li&gt;
  &lt;li&gt;react-native-image-picker(cordova)&lt;/li&gt;
  &lt;li&gt;react-native-sqlite(cordova)&lt;/li&gt;
  &lt;li&gt;react-native-file(cordova)&lt;/li&gt;
  &lt;li&gt;react-native-zip(cordova)&lt;/li&gt;
  &lt;li&gt;react-native-geolocation&lt;/li&gt;
  &lt;li&gt;react-native-device&lt;/li&gt;
  &lt;li&gt;react-native-battery-status&lt;/li&gt;
  &lt;li&gt;react-native-media-capture&lt;/li&gt;
  &lt;li&gt;react-native-fs&lt;/li&gt;
  &lt;li&gt;react-native-cache-image(react-native的Image默认就具备永久缓存, 还需要嘛?)&lt;/li&gt;
  &lt;li&gt;react-native-http-cache&lt;/li&gt;
  &lt;li&gt;react-native-shimmer&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/01/react-native-learning-log/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/01/react-native-learning-log/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native使用iconfont来替代icon图片</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;众所周知, 图片是有诸多优点的，然而目前在网站以及APP设计这行业面临各种各样的挑战。
图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低性能的。
图片还有一个缺点就是不能很好的进行“缩放”，
因此，有时候在“响应式设计”中需要使用图像的最好解决方案就是不去使用图片。&lt;/p&gt;

&lt;h3 id=&quot;iconfont&quot;&gt;为什么要使用iconfont(字体图标)&lt;/h3&gt;

&lt;p&gt;点击&lt;a href=&quot;http://www.w3cplus.com/css3/icon-fonts.html&quot;&gt;这里&lt;/a&gt;或[这里]了解使用iconfont(字体图片)的优缺点&lt;/p&gt;

&lt;h3 id=&quot;iosiconfont&quot;&gt;ios实现iconfont&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装第三方组件react-native-vector-icons &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install react-native-vector-icons --save&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;组件内置了如下字库:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Entypo by Daniel Bruce (411 icons)&lt;/li&gt;
      &lt;li&gt;EvilIcons by Alexander Madyankin &amp;amp; Roman Shamin (v1.8.0, 70 icons)&lt;/li&gt;
      &lt;li&gt;FontAwesome by Dave Gandy (v4.6.3, 634 icons)&lt;/li&gt;
      &lt;li&gt;Foundation by ZURB, Inc. (v3.0, 283 icons)&lt;/li&gt;
      &lt;li&gt;Ionicons by Ben Sperry (v3.0.0, 859 icons)&lt;/li&gt;
      &lt;li&gt;MaterialIcons by Google, Inc. (v2.2.3, 932 icons)&lt;/li&gt;
      &lt;li&gt;Octicons by Github, Inc. (v3.5.0, 166 icons)&lt;/li&gt;
      &lt;li&gt;Zocial by Sam Collins (v1.0, 100 icons)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;也可以使用自定义的字库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用组件内置字库, 需要执行如下步骤:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/react-native-vector-icons&lt;/code&gt;目录, 并将&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts&lt;/code&gt;目录(或者只是你需要的一个字库文件)拖至Xcode中的工程里.
需要注意的是加入时需要保证勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Add to targets&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Create groups&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;, 新增一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts provided by application&lt;/code&gt;属性, 值设置为加入的字库文件, 如下图所示:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://cloud.githubusercontent.com/assets/378279/12421498/2db1f93a-be88-11e5-89c8-2e563ba6251a.png&quot;&gt;Fonts provided by application&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用自定义字库, 需要执行如下步骤:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;需要自行生成一个*.ttf字库文件, &lt;a href=&quot;http://www.iconfont.cn/&quot;&gt;点这里查看如何快速获取自定义字库&lt;/a&gt;,&lt;/p&gt;

        &lt;p&gt;字库文件中的内容, 包含字库名称, 每项icon矢量图等都可以自定义(下面的示例中定义为’iconfont’), &lt;a href=&quot;http://cyqresig.github.io/2016/06/30/font-creator/&quot;&gt;点这里查看如何快速修改字库&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;将自定义生成的字库文件(假设文件名为font.ttf)拖至Xcode中的工程里,&lt;/p&gt;

        &lt;p&gt;需要注意的是加入时需要保证勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Add to targets&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Create groups&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;, 新增一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts provided by application&lt;/code&gt;属性, 值设置为加入的字库文件, 同步骤2&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;androidiconfont&quot;&gt;android实现iconfont&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装第三方组件react-native-vector-icons &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install react-native-vector-icons --save&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;组件内置了如下字库:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Entypo by Daniel Bruce (411 icons)&lt;/li&gt;
      &lt;li&gt;EvilIcons by Alexander Madyankin &amp;amp; Roman Shamin (v1.8.0, 70 icons)&lt;/li&gt;
      &lt;li&gt;FontAwesome by Dave Gandy (v4.6.3, 634 icons)&lt;/li&gt;
      &lt;li&gt;Foundation by ZURB, Inc. (v3.0, 283 icons)&lt;/li&gt;
      &lt;li&gt;Ionicons by Ben Sperry (v3.0.0, 859 icons)&lt;/li&gt;
      &lt;li&gt;MaterialIcons by Google, Inc. (v2.2.3, 932 icons)&lt;/li&gt;
      &lt;li&gt;Octicons by Github, Inc. (v3.5.0, 166 icons)&lt;/li&gt;
      &lt;li&gt;Zocial by Sam Collins (v1.0, 100 icons)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;也可以使用自定义的字库&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用组件内置字库, 需要执行如下步骤:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;找到&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules/react-native-vector-icons&lt;/code&gt;目录, 并将&lt;code class=&quot;highlighter-rouge&quot;&gt;Fonts&lt;/code&gt;目录中的字库文件拖至&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/assets/fonts&lt;/code&gt;里.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果需要使用自定义字库, 需要执行如下步骤:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;需要自行生成一个*.ttf字库文件, &lt;a href=&quot;http://www.iconfont.cn/&quot;&gt;点这里查看如何快速获取自定义字库&lt;/a&gt;,&lt;/p&gt;

        &lt;p&gt;字库文件中的内容, 包含字库名称, 每项icon矢量图等都可以自定义(下面的示例中定义为’iconfont’), &lt;a href=&quot;http://cyqresig.github.io/2016/06/30/font-creator/&quot;&gt;点这里查看如何快速修改字库&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;将自定义生成的字库文件(假设文件名为font.ttf)拖至&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/src/main/assets/fonts&lt;/code&gt;里,&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;效果展示&lt;/h3&gt;

&lt;h3 id=&quot;react-native&quot;&gt;react-native代码示例&lt;/h3&gt;

&lt;h4 id=&quot;section-1&quot;&gt;使用内置字库&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import Icon from &#39;react-native-vector-icons/Ionicons&#39;;

function ExampleView(props) {
  return (&amp;lt;Icon name=&quot;ios-person&quot; size={30} color=&quot;#4F8EF7&quot; /&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-2&quot;&gt;使用自定义字库&lt;/h4&gt;

&lt;h4 id=&quot;ios&quot;&gt;ios&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { createIconSet } from &#39;react-native-vector-icons&#39;;
const glyphMap = {
  &#39;mui-nav-right&#39;: 58755,
  &#39;mui-nav-left&#39;: 58481,
};
const MuiIcon = createIconSet(glyphMap, &#39;iconfont&#39;);

function ExampleView(props) {
    return (&amp;lt;MuiIcon size={20} name={&#39;mui-nav-left&#39;} color={&#39;#E5E5E5&#39;}/&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;android&quot;&gt;android&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { createIconSet } from &#39;react-native-vector-icons&#39;;
const glyphMap = {
  &#39;mui-nav-right&#39;: 58755,
  &#39;mui-android-nav-left&#39;: 58481,
  &#39;mui-voicer&#39;: 58162,
};
const MuiIcon = createIconSet(glyphMap, &#39;iconfont&#39;, &#39;mui.ttf&#39;);

function ExampleView(props) {
    return (&amp;lt;MuiIcon size={20} name={&#39;mui-android-nav-left&#39;} color={&#39;#E5E5E5&#39;}/&amp;gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;注意事项&lt;/h3&gt;

&lt;p&gt;示例中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&#39;mui-nav-right&#39;: 58755&lt;/code&gt;, &lt;em&gt;mui-nav-right&lt;/em&gt;为icon的名称, 可以自定义, 使用时赋值给&lt;em&gt;name&lt;/em&gt;,
58755为这个字库文件中对应icon的16进制表示.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/01/react-native-iconfont/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/01/react-native-iconfont/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native实现launchImage和splash-screen</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;splashscreen&quot;&gt;为什么实现splashScreen&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;对于ios版本, 点击桌面的app icon后, 自动加载launchImage, launchImage加载完毕后就会进入应用首屏,
虽然launchImage加载持续时间可以手动设置, 但是却没有关闭launchImage的api, 如果希望在加载首屏前执行一
些逻辑(例如, 网络请求一些数据), 在这些逻辑执行完毕之前用户看不见首屏, 仍然只能看到lauchImage展现的部分,
是无法实现的. 因此, ios需要自行实现类似android的splashScreen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于android版本, 源生支持实现splashScreen, 但要实现类似ios的launchImage效果, 需要对AndroidManifest.
xml文件进行微调.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;ioslaunchimage&quot;&gt;ios实现launchImage&lt;/h2&gt;
&lt;p&gt;ios源生支持实现launchImage, 可以点&lt;a href=&quot;http://cyqresig.github.io/2016/06/30/ios-launch-image&quot;&gt;这里&lt;/a&gt;了解, 这里就不展开了.&lt;/p&gt;

&lt;h2 id=&quot;iossplashscreen&quot;&gt;ios实现splashScreen&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装组件&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-splashscreen&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @remobile/react-native-splashscreen --save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;RCTSplashScreen.xcodeproj&lt;/code&gt;拖入你的Xode工程的&lt;code class=&quot;highlighter-rouge&quot;&gt;Libraries&lt;/code&gt;下.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;点击你的主工程文件, 选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;, 并在工程Products目录下找到&lt;code class=&quot;highlighter-rouge&quot;&gt;RCTSplashScreen.xcodeproj&lt;/code&gt;, 将其中包含的&lt;code class=&quot;highlighter-rouge&quot;&gt;libRCTSplashScreen.a&lt;/code&gt;拖入.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Builder Settings&lt;/code&gt;中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;Header Search Paths&lt;/code&gt;, 确认其中包含&lt;code class=&quot;highlighter-rouge&quot;&gt;$(SRCROOT)/../../../react-native/React&lt;/code&gt;(recursive).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Builder Settings&lt;/code&gt;中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;Header Search Paths&lt;/code&gt;,  确认其中包含&lt;code class=&quot;highlighter-rouge&quot;&gt;$(SRCROOT)/../node_modules/@remobile/react-native-splashscreen/ios/RCTSplashScreen&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;删除工程里的LaunchScreen.xib&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将组件中的&lt;code class=&quot;highlighter-rouge&quot;&gt;SplashScreenResource&lt;/code&gt;目录拖入工程, 确认类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;groups&lt;/code&gt;, 并且&lt;code class=&quot;highlighter-rouge&quot;&gt;Add Targets&lt;/code&gt;选中, 如果希望使用不同的splash图片, 可以替换&lt;code class=&quot;highlighter-rouge&quot;&gt;splash.png&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;工程里找到AppDelegate.m&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
#import &quot;RCTSplashScreen.h&quot; //&amp;lt;--- 新增导入
...
RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                      moduleName:@&quot;KitchenSink&quot;
                                               initialProperties:nil
                                                   launchOptions:launchOptions];

  [RCTSplashScreen show:rootView]; //&amp;lt;--- 新增显示splashScreen

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [[UIViewController alloc] init];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];
  return YES;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;androidlaunchimage&quot;&gt;android实现launchImage&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;准备一张背景图片, 自定义命名(比如命名为splash), 自己选择图片格式, 放在drawable目录下&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置strings.xml&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;resources&amp;gt;

    &amp;lt;!--&amp;amp;lt;!&amp;amp;ndash; Base application theme. &amp;amp;ndash;&amp;amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;style name=&quot;AppTheme&quot; parent=&quot;Theme.AppCompat.Light.NoActionBar&quot;&amp;gt;--&amp;gt;
        &amp;lt;!--&amp;amp;lt;!&amp;amp;ndash; Customize your theme here. &amp;amp;ndash;&amp;amp;gt;--&amp;gt;
    &amp;lt;!--&amp;lt;/style&amp;gt;--&amp;gt;

    &amp;lt;style name=&quot;AppTheme&quot; parent=&quot;@android:style/Theme.Black&quot;&amp;gt;
        &amp;lt;item name=&quot;android:windowBackground&quot;&amp;gt;@drawable/splash&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;android:windowNoTitle&quot;&amp;gt;true&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;android:windowFullscreen&quot;&amp;gt;true&amp;lt;/item&amp;gt;
        &amp;lt;item name=&quot;android:windowContentOverlay&quot;&amp;gt;@null&amp;lt;/item&amp;gt;
    &amp;lt;/style&amp;gt;
&amp;lt;/resources&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;配置AndroidManifest.xml&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    package=&quot;com.helloreactnative&quot;
    android:versionCode=&quot;1&quot;
    android:versionName=&quot;1.0&quot;&amp;gt;

    &amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&amp;gt;

    &amp;lt;uses-sdk
        android:minSdkVersion=&quot;16&quot;
        android:targetSdkVersion=&quot;22&quot; /&amp;gt;

    &amp;lt;application
      android:allowBackup=&quot;true&quot;
      android:label=&quot;@string/app_name&quot;
      android:icon=&quot;@mipmap/ic_launcher&quot;&amp;gt;
      &amp;lt;activity
        android:name=&quot;.MainActivity&quot;
        android:label=&quot;@string/app_name&quot;
        android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot;
          android:theme=&quot;@style/AppTheme&quot;&amp;gt;
        &amp;lt;intent-filter&amp;gt;
            &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;
            &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;
        &amp;lt;/intent-filter&amp;gt;
      &amp;lt;/activity&amp;gt;
      &amp;lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&amp;gt;
    &amp;lt;/application&amp;gt;

&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;androidsplashscreen&quot;&gt;android实现splashScreen&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装组件&lt;code class=&quot;highlighter-rouge&quot;&gt;react-native-splashscreen&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install @remobile/react-native-splashscreen --save&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在工程中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;android/settings.gradle&lt;/code&gt;, 加入如下:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
include &#39;:react-native-splashscreen&#39;
project(&#39;:react-native-splashscreen&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/@remobile/react-native-splashscreen/android&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;在工程中找到&lt;code class=&quot;highlighter-rouge&quot;&gt;android/app/build.gradle&lt;/code&gt;, 加入如下:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
dependencies {
    ...
    compile project(&#39;:react-native-splashscreen&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果希望使用不同的splash图片, 替换&lt;code class=&quot;highlighter-rouge&quot;&gt;res/drawable/splash.png&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在MainActivity.java中注册模块&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import com.remobile.splashscreen.*;  // &amp;lt;--- 导入包

public class MainActivity extends Activity implements DefaultHardwareBackBtnHandler {
  ......
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    mReactInstanceManager = ReactInstanceManager.builder()
      .setApplication(getApplication())
      .setBundleAssetName(&quot;index.android.bundle&quot;)
      .setJSMainModuleName(&quot;index.android&quot;)
      .addPackage(new MainReactPackage())
      .addPackage(new RCTSplashScreenPackage(this))              // &amp;lt;------ 加入splashScreen的package
      .setUseDeveloperSupport(BuildConfig.DEBUG)
      .setInitialLifecycleState(LifecycleState.RESUMED)
      .build();

    mReactRootView.startReactApplication(mReactInstanceManager, &quot;ExampleRN&quot;, null);

    setContentView(mReactRootView);
  }

  ......
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;效果展示&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://cyqresig.github.io/img/ios-splash-screen.gif&quot; alt=&quot;ios-splash-screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cyqresig.github.io/img/android-splash-screen.gif&quot; alt=&quot;android-splash-screen&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;react-nativesplashscreen&quot;&gt;react-native中关闭splashScreen&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&#39;use strict&#39;;
var React = require(&#39;react-native&#39;);
var {
    AppRegistry,
    View,
    Text,
} = React;

var SplashScreen = require(&#39;@remobile/react-native-splashscreen&#39;);  //导入包

var KitchenSink = React.createClass({
    componentDidMount: function() {
        SplashScreen.hide();    //调用api隐藏splashScreen
    },
    render() {
        return(
            &amp;lt;View&amp;gt;
                &amp;lt;Text&amp;gt;
                    fangyunjiang is a good developer!
                &amp;lt;/Text&amp;gt;
            &amp;lt;/View&amp;gt;
        );
    }
});

AppRegistry.registerComponent(&#39;KitchenSink&#39;, () =&amp;gt; KitchenSink);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/30/react-native-splash-screen/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/30/react-native-splash-screen/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native的尺寸pt与psd设计稿中的px的转换规则</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;pt-point&quot;&gt;pt (point，磅)：&lt;/h3&gt;
&lt;p&gt;是一个物理长度单位，指的是72分之一英寸。&lt;/p&gt;

&lt;h3 id=&quot;px-pixel&quot;&gt;px (pixel，像素)：&lt;/h3&gt;
&lt;p&gt;是一个虚拟长度单位，是计算机系统的数字化图像长度单位，如果px要换算成物理长度，需要指定精度DPI(Dots Per Inch，每英寸像素数)，在扫描打印时一般都有DPI可选。Windows系统默认是96dpi，Apple系统默认是72dpi。&lt;/p&gt;

&lt;h3 id=&quot;em&quot;&gt;em(相对长度单位，相对于当前对象内文本的字体尺寸)：&lt;/h3&gt;
&lt;p&gt;是一个相对长度单位，最初是指字母M的宽度，故名em。现指的是字符宽度的倍数，用法类似百分比，如：0.8em, 1.2em,2em等。通常1em=16px。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;字号：&lt;/h3&gt;
&lt;p&gt;是中文字库中特有的一种单位，以中文代号表示特定的磅值pt，便于记忆、表述。&lt;/p&gt;

&lt;p&gt;pt和px的换算公式可以根据pt的定义得出:&lt;/p&gt;

&lt;p&gt;pt=1/72(英寸), px=1/dpi(英寸)&lt;/p&gt;

&lt;p&gt;因此 pt=px*72/dpi&lt;/p&gt;

&lt;p&gt;以Windows下的96dpi来计算，pt=px&lt;em&gt;72/96=px&lt;/em&gt;3/4&lt;/p&gt;

&lt;p&gt;ios设备的物理分辨率, 逻辑分辨率, 缩放比, DPI等参数参见下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cyqresig.github.io/img/ios-device-dpi.jpg&quot; alt=&quot;ios-device-dpi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;react-native中设置宽高, 以及字号所用的尺寸单位是pt, 是针对上图中的逻辑分辨率(logic point)而言的.
可以看到iphone6的物理分辨率是750&lt;em&gt;1334, 逻辑分辨率是375&lt;/em&gt;667, 缩放比为2, 假设在react-native设置宽度为10pt,
则在iphone6上实际显示为20px.&lt;/p&gt;

&lt;p&gt;因此, 假设你拿到的psd设计稿(注: ps的屏幕分辨率需设置为72像素/英寸)是基于iphone6的分辨率来做的,
则react-native中设置对象的尺寸 = 设计稿对应对象的尺寸(px) / 2.&lt;/p&gt;

&lt;p&gt;另外, 也可以&lt;a href=&quot;http://www.vanadis.cn/2016/07/06/how-to-find-mobile-device-pixel-radio/&quot;&gt;通过chrome浏览器的开发者工具查看常用移动设备的缩放比&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;最终的转换公式为:&lt;/h3&gt;
&lt;p&gt;react-native中设置对象的尺寸 = 设计稿对应对象的尺寸(px) / 设备缩放比&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/30/react-native-pt-px-translation/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/30/react-native-pt-px-translation/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>前端图片标注神器-MarkMan</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;待编辑&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/30/markman/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/30/markman/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>前端iconfont字库编辑工具-font creator</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;待编辑&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/30/font-creator/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/30/font-creator/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native搭建开发环境</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;环境需求&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;一台mac电脑(笔记本, 台式机不限), 操作系统OS X及以上&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装&lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;点击桌面左下角”Finder” -&amp;gt; 点击顶部菜单栏”前往” -&amp;gt; 选择”实用工具” -&amp;gt; 双击”终端”&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;执行如下命令&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;注: 在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo chown -R &lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; /usr/local&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用Homebrew来安装Node.js.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装React Native的命令行工具（react-native-cli）&lt;/p&gt;

    &lt;p&gt;React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g react-native-cli&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;注：由于众所周知的网络原因，react-native命令行从npm官方源拖代码时会遇上麻烦。请将npm仓库源替换为国内镜像：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 npm config set registry https://registry.npm.taobao.org --global
 npm config set disturl https://npm.taobao.org/dist --global
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;推荐安装&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt;是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install watchman&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.flowtype.org/&quot;&gt;Flow&lt;/a&gt;是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;强大的前端开发IDE, 可集成很多实用插件, 包括&lt;a href=&quot;http://cyqresig.github.io/2016/06/27/webstorm-react-native-grammer-plugin&quot;&gt;react-native语法智能提醒插件&lt;/a&gt;, 可用于编写React Native应用&lt;/p&gt;

    &lt;p&gt;安装破解版请参阅&lt;a href=&quot;http://cyqresig.github.io/2016/06/27/webstorm-crack&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-2&quot;&gt;调试&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native init AwesomeProject
cd AwesomeProject
react-native run-ios
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;你也可以直接在双击&lt;code class=&quot;highlighter-rouge&quot;&gt;ios/AwesomeProject.xcodeproj&lt;/code&gt;文件然后在Xcode中点击Run按钮,
或者先在WebStorm中打开AwesomeProject文件夹 然后在Terminal中执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;，再在Xcode中点击Run按钮&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;修改项目&lt;/h2&gt;

&lt;p&gt;现在你已经成功运行了项目，我们可以开始尝试动手改一改了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;使用你喜欢的编辑器打开index.ios.js并随便改上几行。
在iOS Emulator中按下⌘-R就可以刷新APP并看到你的最新修改！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/27/react-native-requirement/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/27/react-native-requirement/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
      <item>
        <title>react-native搭建开发环境</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;环境需求&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;一台mac电脑(笔记本, 台式机不限), 操作系统OS X及以上&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装&lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;点击桌面左下角”Finder” -&amp;gt; 点击顶部菜单栏”前往” -&amp;gt; 选择”实用工具” -&amp;gt; 双击”终端”&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;执行如下命令&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;注: 在Max OS X 10.11（El Capitan)版本中，homebrew在安装软件时可能会碰到/usr/local目录不可写的权限问题。可以使用下面的命令修复：&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo chown -R &lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; /usr/local&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用Homebrew来安装Node.js.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装React Native的命令行工具（react-native-cli）&lt;/p&gt;

    &lt;p&gt;React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g react-native-cli&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;注：由于众所周知的网络原因，react-native命令行从npm官方源拖代码时会遇上麻烦。请将npm仓库源替换为国内镜像：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 npm config set registry https://registry.npm.taobao.org --global
 npm config set disturl https://npm.taobao.org/dist --global
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装Android Studio&lt;/p&gt;

    &lt;p&gt;React Native目前需要&lt;a href=&quot;http://reactnative.cn/static/docs/0.27/img/react-native-android-studio-custom-install.png&quot;&gt;Android Studio&lt;/a&gt;2.0或更高版本。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Android Studio需要Java Development Kit [JDK] 1.8或更高版本。
 你可以在命令行中输入`javac -version`来查看你当前安装的JDK版本。
 如果版本不合要求，则可以到 官网上下载。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Android Studio包含了运行和测试React Native应用所需的Android SDK和模拟器。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 除非特别注明，请不要改动安装过程中的选项。
 比如Android Studio默认安装了`Android Support Repository`，而这也是React Native必须的
 （否则在react-native run-android时会报appcompat-v7包找不到的错误）。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;安装过程中有一些需要改动的选项：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;选择Custom选项：
 &lt;img src=&quot;http://reactnative.cn/static/docs/0.27/img/react-native-android-studio-custom-install.png&quot; alt=&quot;选择Custom选项&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Performance&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Android Virtual Device&lt;/code&gt;
 &lt;img src=&quot;http://reactnative.cn/static/docs/0.27/img/react-native-android-studio-additional-installs.png&quot; alt=&quot;勾选`Performance`和`Android Virtual Device`&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;安装完成后，在Android Studio的启动欢迎界面中选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Configure | SDK Manager&lt;/code&gt;。
 &lt;img src=&quot;http://reactnative.cn/static/docs/0.27/img/react-native-android-studio-configure-sdk.png&quot; alt=&quot;勾选`Performance`和`Android Virtual Device`&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;SDK Platforms&lt;/code&gt;窗口中，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Show Package Details&lt;/code&gt;，然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;Android 6.0 (Marshmallow)&lt;/code&gt;中勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Google APIs&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Intel x86 Atom System Image&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Intel x86 Atom_64 System Image&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;Google APIs Intel x86 Atom_64 System Image&lt;/code&gt;。
 &lt;img src=&quot;http://reactnative.cn/static/docs/0.27/img/react-native-android-studio-android-sdk-platforms.png&quot; alt=&quot;在`SDK Platforms`窗口中&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;SDK Tools&lt;/code&gt;窗口中，选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Show Package Details&lt;/code&gt;，然后在&lt;code class=&quot;highlighter-rouge&quot;&gt;Android SDK Build Tools&lt;/code&gt;中勾选&lt;code class=&quot;highlighter-rouge&quot;&gt;Android SDK Build-Tools 23.0.1&lt;/code&gt;。（必须是这个版本）
 &lt;img src=&quot;http://reactnative.cn/static/docs/0.27/img/react-native-android-studio-android-sdk-build-tools.png&quot; alt=&quot;在`SDK Tools`窗口中&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;配置ANDROID_HOME环境变量
 确保&lt;code class=&quot;highlighter-rouge&quot;&gt;ANDROID_HOME&lt;/code&gt;环境变量正确地指向了你安装的Android SDK的路径。
 具体的做法是把下面的命令加入到&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;文件中：
 (注：&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;表示用户目录，即&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/你的用户名/&lt;/code&gt;，而小数点开头的文件在Finder中是隐藏的，并且这个文件有可能并不存在。
 请在终端下使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo vi ~/.bash_profile&lt;/code&gt;命令创建或编辑。如不熟悉vi操作，请点击&lt;a href=&quot;http://cyqresig.github.io/2016/06/27/vi&quot;&gt;这里&lt;/a&gt;学习）&lt;/p&gt;

        &lt;p&gt;# 如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。
 export ANDROID_HOME=~/Library/Android/sdk&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;然后使用下列命令使其立即生效（否则重启后才生效）：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.bash_profile&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $ANDROID_HOME&lt;/code&gt;检查此变量是否已正确设置&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;Android SDK&lt;/code&gt;的Tools目录添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;变量中
 你可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;Android SDK&lt;/code&gt;的tools和&lt;code class=&quot;highlighter-rouge&quot;&gt;platform-tools&lt;/code&gt;目录添加到PATH变量中，以便在终端中运行一些Android工具，
 例如&lt;code class=&quot;highlighter-rouge&quot;&gt;android avd&lt;/code&gt;或是&lt;code class=&quot;highlighter-rouge&quot;&gt;adb logcat&lt;/code&gt;等。具体做法仍然是在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;中添加：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;注意：你的SDK的具体路径可能不同&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; PATH=&quot;~/Library/Android/sdk/tools:~/Library/Android/sdk/platform-tools:${PATH}&quot;
 export PATH
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;推荐安装&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt;是由Facebook提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager可以快速捕捉文件的变化从而实现实时刷新）。&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install watchman&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.flowtype.org/&quot;&gt;Flow&lt;/a&gt;是一个静态的JS类型检查工具。译注：你在很多示例中看到的奇奇怪怪的冒号问号，以及方法参数中像类型一样的写法，都是属于这个flow工具的语法。这一语法并不属于ES标准，只是Facebook自家的代码规范。所以新手可以直接跳过（即不需要安装这一工具，也不建议去费力学习flow相关语法）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;强大的前端开发IDE, 可集成很多实用插件, 包括&lt;a href=&quot;http://cyqresig.github.io/2016/06/27/webstorm-react-native-grammer-plugin&quot;&gt;react-native语法智能提醒插件&lt;/a&gt;, 可用于编写React Native应用&lt;/p&gt;

    &lt;p&gt;安装破解版请参阅&lt;a href=&quot;http://cyqresig.github.io/2016/06/27/webstorm-crack&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.gradle.org/2.9/userguide/gradle_daemon.html&quot;&gt;Gradle Daemon&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;开启Gradle Daemon可以极大地提升java代码的增量编译速度。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-2&quot;&gt;常见问题&lt;/h2&gt;
&lt;p&gt;### 安装Android Studio时无法创建虚拟设备&lt;/p&gt;

&lt;p&gt;某些版本的Android Studio可能存在一个&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=207563&quot;&gt;已知的bug&lt;/a&gt;，导致在安装时无法创建虚拟设备。安装过程中可能看到如下报错：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating Android virtual device
Unable to create a virtual device: Unable to create Android virtual device
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你碰到了这个问题，可以运行&lt;code class=&quot;highlighter-rouge&quot;&gt;android avd&lt;/code&gt;来手工创建虚拟设备。
&lt;img src=&quot;http://reactnative.cn/static/docs/0.27/img/react-native-android-studio-avd.png&quot; alt=&quot;手工创建虚拟设备&quot; /&gt;
然后在AVD管理器（AVD Manager）窗口中选择新设备并点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Start...&lt;/code&gt;来启动。&lt;/p&gt;

&lt;h3 id=&quot;shell&quot;&gt;Shell命令无响应的异常&lt;/h3&gt;
&lt;p&gt;如果你碰到了下面这样的异常：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Execution failed for task &#39;:app:installDebug&#39;.
  com.android.builder.testing.api.DeviceException: com.android.ddmlib.ShellCommandUnresponsiveException
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;试着将项目目录&lt;code class=&quot;highlighter-rouge&quot;&gt;/android/build.gradle&lt;/code&gt;中的Gradle版本改为1.2.3。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch ~/.gradle/gradle.properties &amp;amp;&amp;amp; echo &quot;org.gradle.daemon=true&quot; &amp;gt;&amp;gt; ~/.gradle/gradle.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;调试&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;react-native init AwesomeProject
cd AwesomeProject
react-native run-android
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;修改项目&lt;/h2&gt;

&lt;p&gt;现在你已经成功运行了项目，我们可以开始尝试动手改一改了：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;使用你喜欢的编辑器打开index.android.js并随便改上几行。
在Android Emulator中按下⌘-R就可以刷新APP并看到你的最新修改！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/06/27/react-native-requirement-android/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/06/27/react-native-requirement-android/</guid>
        
        <category>react-native</category>
        
        
      </item>
    
  </channel>
</rss>
