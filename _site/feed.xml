<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>绯雨闲丸 Blog</title>
    <description>关于前端开发,react-native开发,nodejs开发 | 绯雨闲丸，Web &amp; Mobile，Front-End Engineer | 这里是 @HISAME SHIZUMARU绯雨闲丸 的个人博客，与你一起发现更大的世界。</description>
    <link>http://www.vanadis.cn/</link>
    <atom:link href="http://www.vanadis.cn/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 25 Mar 2017 19:51:34 +0800</pubDate>
    <lastBuildDate>Sat, 25 Mar 2017 19:51:34 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>EditorConfig使用小记</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;editorconfig&quot;&gt;为什么要使用EditorConfig&lt;/h2&gt;

&lt;p&gt;当存在多人协作开发项目时，每个人喜好使用的IDE经常各不相同，就算相同每个人对于IDE喜好的编码风格配置（例如缩进是2个空格还是4个空格）也未必相同。&lt;/p&gt;

&lt;p&gt;而&lt;code class=&quot;highlighter-rouge&quot;&gt;EditorConfig&lt;/code&gt;却可以很方便地解决上面问题。&lt;/p&gt;

&lt;h2 id=&quot;editorconfig-1&quot;&gt;EditorConfig是解决问题的&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EditorConfig&lt;/code&gt;的工作原理是：
当你打开文件进行coding时，&lt;code class=&quot;highlighter-rouge&quot;&gt;EditorConfig&lt;/code&gt;插件会去查找当前编辑文件的目录或者其祖先目录中是否存在&lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;配置文件。
如果存在，则IDE的编码风格会覆盖IDE自身的设置，与&lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;文件中定义的保持一致，。&lt;/p&gt;

&lt;h2 id=&quot;editorconfig-2&quot;&gt;如何使用EditorConfig&lt;/h2&gt;

&lt;p&gt;EditorConfig使用起来非常的方便。只需要如下几个步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig&lt;/code&gt;的文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在这个文件中定义项目的编码规范&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;给IDE安装EditorConfig插件&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;editorconfig-3&quot;&gt;推荐的常用EditorConfig编码风格定义&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;indent_style 缩进风格，考虑到&lt;code class=&quot;highlighter-rouge&quot;&gt;tab&lt;/code&gt;的缩进表现可以被改变，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;space&lt;/code&gt;而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;tab&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;indent_size 缩进数，只在indent_style设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;space&lt;/code&gt;时有用，推荐设置为4个空格&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;end_of_line 换行符格式，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;lf&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;charset 文件编码，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;trim_trailing_whitespace 是否删除行尾的空格，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;insert_final_newline 是否在文件最后插入一个空行，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;quote_type 字符串是否强制使用单/双引号，js文件推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;single&lt;/code&gt;, 其他使用&lt;code class=&quot;highlighter-rouge&quot;&gt;double&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;spaces_around_operators 在操作符左右是否空格，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;spaces_around_brackets 在括号左右是否空格，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;indent_brace_style 使用圆括弧的风格，推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;1TBS&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;定义使用编码风格的文件范围&lt;/h2&gt;

&lt;p&gt;以下的配置只对lib目录下的js文件生效
&lt;code class=&quot;highlighter-rouge&quot;&gt;
[lib/**.js]
indent_style = space
indent_size = 2
&lt;/code&gt;
## 资源&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://editorconfig.org/&quot;&gt;EditorConfig 官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties&quot;&gt;EditorConfig 编码风格定义列表&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 25 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/03/25/editor-config/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/03/25/editor-config/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>创建你自己的前端项目脚手架工具</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 19 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/03/19/create-your-own-front-end-scaffold/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/03/19/create-your-own-front-end-scaffold/</guid>
        
        <category>front-end</category>
        
        <category>scaffold</category>
        
        
      </item>
    
      <item>
        <title>创建你自己的前端项目模板</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/02/26/create-your-own-front-end-archetype/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/02/26/create-your-own-front-end-archetype/</guid>
        
        <category>front-end</category>
        
        <category>template</category>
        
        <category>archetype</category>
        
        
      </item>
    
      <item>
        <title>react-native-navigation使用小记</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;github&quot;&gt;github&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wix/react-native-navigation/&quot;&gt;react-native-navigation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;感受&lt;/h2&gt;
&lt;p&gt;react-native-navigation是目前唯一一款使用原生代码来实现navigator的插件,
使用后navigator的push/pop的动画将脱离js线程而改由原生的UI线程处理, 切屏效果会和原生态一样流畅, 再也不会出现由于js线程渲染导致的navigator切屏动画的卡顿效果了,
并且该插件还同时内置实现了原生态版本的tabbar
但是使用下来发现还是有不少地方需要自行做额外的优化处理.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;需要自行修改少许ios/android代码实现类似react-native官方的Navigator具备的’willfocus’与’didfocus’事件监听&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于navigator的切屏效果由原生的UI线程处理, 使用一些带有原生态动画效果的组件(比如, react-native-swiper, 由scrollView实现动画)时,
切屏效果会导致组件的动画效果执行到一半时中断, 所以需要在切屏事件上做处理, 重置组件的动画状态&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;由于使用的原生态默认的切屏动画效果, 动画的形态取决于编译的sdk,
ios默认使用最新版本没有问题,
但android使用7.1新版时切屏的动画并不是传统的slide-from-right, 效果比较尴尬. 如果要调整, 需要修改插件的android版本代码及编译的sdk版本, 比较麻烦.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;android部分必须api 25才可以编译, react-native项目默认api 23就可以了, 需要自行更改项目的配置.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;github上有数以百计的issues, 根据需求情况可能会碰到新的坑, 虽然说理论上可以自行处理, 但, 实在是好麻烦…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;虽然使用react-native-navigation可以使得app在切屏时获得与原生完全一致的体验, 但是完全掌握插件的使用方法代价也不小,
如对体验要求不是特别高, 建议还是使用官方的Navigator比较实在一点(虽然这玩意儿也有隐藏的坑-_-!!!).&lt;/p&gt;

</description>
        <pubDate>Sun, 29 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/29/react-native-navigation-usage/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/29/react-native-navigation-usage/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>react-native整合进已存在的Android原生app</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;示例&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cyqresig/ReactNativeIntegrationWithExistingApps&quot;&gt;ReactNativeIntegrationWithExistingApps&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先安装好react-native开发环境&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保证你的android工程在项目目录的android目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;$root/android&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建一个原生app, 选&lt;code class=&quot;highlighter-rouge&quot;&gt;Android Application&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;文件, 并加入必要的scripts与dependency&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-native-into-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node node_modules/react-native/local-cli/cli.js start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;15.4.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^0.40.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装依赖包&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.android.js&lt;/code&gt;文件, 并编辑内容:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import React from &#39;react&#39;;
 import {
     AppRegistry,
     StyleSheet,
     Text,
     View
 } from &#39;react-native&#39;;

 class HelloWorld extends React.Component {
     render() {
         return (
             &amp;lt;View style={styles.container}&amp;gt;
     &amp;lt;Text style={styles.hello}&amp;gt;It is react-native Text!&amp;lt;/Text&amp;gt;
         &amp;lt;/View&amp;gt;
     )
     }
 }
 var styles = StyleSheet.create({
     container: {
         flex: 1,
         justifyContent: &#39;center&#39;,
     },
     hello: {
         fontSize: 20,
         textAlign: &#39;center&#39;,
         margin: 10,
     },
 });

 AppRegistry.registerComponent(&#39;HelloWorld&#39;, () =&amp;gt; HelloWorld);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在app下的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;下添加React Native依赖配置:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; dependencies {
         ...
         compile &quot;com.facebook.react:react-native:+&quot; // From node_modules.
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在project下的&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;下, 增加react-native的本地maven入口配置&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; allprojects {
     repositories {
         ...
         maven {
             // All of React Native (JS, Android binaries) is installed from npm
             url &quot;$rootDir/../node_modules/react-native/android&quot;
         }
     }
     ...
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;下增加权限与Activity&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&amp;gt;

 &amp;lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&amp;gt;

 &amp;lt;activity
   android:name=&quot;.MyReactActivity&quot;
   android:label=&quot;@string/app_name&quot;
   android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot;&amp;gt;
 &amp;lt;/activity&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增加原生代码&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyReactActivity extends Activity implements DefaultHardwareBackBtnHandler {
    private ReactRootView mReactRootView;
    private ReactInstanceManager mReactInstanceManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mReactRootView = new ReactRootView(this);
        mReactInstanceManager = ReactInstanceManager.builder()
                .setApplication(getApplication())
                .setBundleAssetName(&quot;index.android.bundle&quot;)
                .setJSMainModuleName(&quot;index.android&quot;)
                .addPackage(new MainReactPackage())
                .setUseDeveloperSupport(BuildConfig.DEBUG)
                .setInitialLifecycleState(LifecycleState.RESUMED)
                .build();
        mReactRootView.startReactApplication(mReactInstanceManager, &quot;HelloWorld&quot;, null);

        setContentView(mReactRootView);
    }

    @Override
    public void invokeDefaultOnBackPressed() {
        super.onBackPressed();
    }

    @Override
    protected void onPause() {
        super.onPause();

        if (mReactInstanceManager != null) {
            mReactInstanceManager.onHostPause(this);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();

        if (mReactInstanceManager != null) {
            mReactInstanceManager.onHostResume(this, this);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (mReactInstanceManager != null) {
            mReactInstanceManager.onHostDestroy();
        }
    }

    @Override
     public void onBackPressed() {
        if (mReactInstanceManager != null) {
            mReactInstanceManager.onBackPressed();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onKeyUp(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_MENU &amp;amp;&amp;amp; mReactInstanceManager != null) {
            mReactInstanceManager.showDevOptionsDialog();
            return true;
        }
        return super.onKeyUp(keyCode, event);
    }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;, 启动debug server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;cd android &amp;amp;&amp;amp; ./gradlew installDebug&lt;/code&gt;, 编译后app会安装入模拟器或设备中&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看模拟器或真机上的运行情况&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 29 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/29/react-native-integration-with-existing-apps-android/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/29/react-native-integration-with-existing-apps-android/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>react-native整合进已存在的iOS原生app</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;示例&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cyqresig/ReactNativeIntegrationWithExistingApps&quot;&gt;ReactNativeIntegrationWithExistingApps&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;步骤&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先安装好react-native开发环境&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保证你的ios工程在项目目录的ios目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;$root/ios&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装ios包管理器CocoaPods, 我们会使用它将react-native的framework代码安装进当前工程中&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install cocoapods&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建一个原生app, 选&lt;code class=&quot;highlighter-rouge&quot;&gt;Single View Application&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;文件, 并加入必要的scripts与dependency&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-native-into-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node node_modules/react-native/local-cli/cli.js start&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;15.4.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;react-native&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^0.40.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装依赖包&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建cocosPads配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod init&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;, 编辑内容:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
   target &#39;reactnativeintotest&#39; do
       pod &#39;React&#39;, :path =&amp;gt; &#39;../node_modules/react-native&#39;, :subspecs =&amp;gt; [
        &#39;Core&#39;,
        &#39;RCTText&#39;,
        &#39;RCTNetwork&#39;,
        &#39;RCTWebSocket&#39;,
      ]
    end
&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装cocoapods管理的依赖项&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.ios.js&lt;/code&gt;文件, 并编辑内容:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React from &#39;react&#39;;
import {
    AppRegistry,
    StyleSheet,
    Text,
    View
} from &#39;react-native&#39;;

class HelloWorld extends React.Component {
    render() {
        return (
            &amp;lt;View style={styles.container}&amp;gt;
    &amp;lt;Text style={styles.hello}&amp;gt;It is react-native Text!&amp;lt;/Text&amp;gt;
        &amp;lt;/View&amp;gt;
    )
    }
}
var styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: &#39;center&#39;,
    },
    hello: {
        fontSize: 20,
        textAlign: &#39;center&#39;,
        margin: 10,
    },
});

AppRegistry.registerComponent(&#39;HelloWorld&#39;, () =&amp;gt; HelloWorld);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在需要打开react-native应用的controller处加入如下代码:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;React/RCTBundleURLProvider.h&amp;gt;
#import &amp;lt;React/RCTRootView.h&amp;gt;



- (IBAction)ToReactNativeWorldPressed:(id)sender {
    NSURL *jsCodeLocation;

    jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];

    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                                        moduleName:@&quot;HelloWorld&quot;
                                                 initialProperties:@{
                                                                     @&quot;scores&quot; : @[
                                                                             @{
                                                                                 @&quot;name&quot; : @&quot;Alex&quot;,
                                                                                 @&quot;value&quot;: @&quot;42&quot;
                                                                                 },
                                                                             @{
                                                                                 @&quot;name&quot; : @&quot;Joel&quot;,
                                                                                 @&quot;value&quot;: @&quot;10&quot;
                                                                                 }
                                                                             ]
                                                                     }

                                                     launchOptions:nil];


    UIViewController *vc = [[UIViewController alloc] init];
    vc.view = rootView;
    [self presentViewController:vc animated:YES completion:nil];
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在storyboard中加入一个button, 将该button的点击事件绑定&lt;code class=&quot;highlighter-rouge&quot;&gt;ToReactNativeWorldPressed&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下, 运行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;, 启动debug server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到项目根目录下ios工程目录下的.xcworkspace文件(cocoapods配置后生成的新的工程文件), 双击打开&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开后, 在Xcode的界面上点击Run&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看模拟器或真机上的运行情况&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/28/react-native-integration-with-existing-apps/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/28/react-native-integration-with-existing-apps/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>Mac上安装安装cocoapods的注意事项</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;安装步骤&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;检查一下gem版本, 必要时升级gem，如果它的版本过低也可能导致安装失败，升级命令如下：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem update --system&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mac OS X 10.11以前，安装cocoapods的命令如下：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install cocoapods&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;OS X 10.11以后，会在安装时碰到没有权限的问题, 需要换成下面的命令：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo gem install -n /usr/local/bin cocoapods&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用pod命令安装, 根据网络线路情况, 可能会非常的耗时, 推荐用电信的线路, 或者翻墙, 命令如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod setup&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看一下pod的版本号, 命令如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod --version&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看一下pod的repo, 命令如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod repo list&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;如结果为0 repos则说明安装不成功，可以删除.cocoapods目录, 重新进行安装&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新安装的命令如下：&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~/.cocoapods/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo rm -rf ~/.cocoapods/&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod setup&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/28/cocoapods-installation/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/28/cocoapods-installation/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>CocoaPod</category>
        
        
      </item>
    
      <item>
        <title>ios开发移除cocoapods配置</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;CocoaPods可以通过命令,将第三方类库配置到我们的项目中,
而不需要采用手动拖拽的方式进行配置.
但是很遗憾的是, CocoaPads并没有移除这些配置的命令,
所以,只能靠手动的方式从项目中移除了.&lt;/p&gt;

&lt;h2 id=&quot;cocoapads&quot;&gt;在项目中删除某个CocoaPads配置的第三方类库&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录下找到Podfile文件并打开&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到需要删除的配置文本, 将之删除, 示例如下:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod &#39;AFNetwork&#39;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;终端在当前项目目录下&lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;命令, 每三方类库被移除&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cocoapods&quot;&gt;在项目中删除整个CocoaPods配置&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;删除项目根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;xcworkspace&lt;/code&gt;文件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;删除项目根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Podfile.lock&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Pods&lt;/code&gt;文件夹&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在XCode中删除项目中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Pods&lt;/code&gt;文件夹及&lt;code class=&quot;highlighter-rouge&quot;&gt;Pods.xcconfig&lt;/code&gt;引用和&lt;code class=&quot;highlighter-rouge&quot;&gt;libpods.a&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在XCode中, 选择&lt;code class=&quot;highlighter-rouge&quot;&gt;Build Phases&lt;/code&gt;选项，删除&lt;code class=&quot;highlighter-rouge&quot;&gt;Check Pods Manifest.lock&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Copy Pods Resources&lt;/code&gt;, 以及&lt;code class=&quot;highlighter-rouge&quot;&gt;Embeded Pods Frameworks&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 28 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2017/01/28/cocoapods-entirely-remove/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2017/01/28/cocoapods-entirely-remove/</guid>
        
        <category>react-native</category>
        
        <category>ios</category>
        
        <category>CocoaPod</category>
        
        
      </item>
    
      <item>
        <title>nodejs中package.json中的字段说明</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;h2 id=&quot;packagejson&quot;&gt;package.json中的字段说明&lt;/h2&gt;

&lt;p&gt;package.json文件可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt;创建&lt;/p&gt;

&lt;p&gt;一个package.json文件通常有以下字段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;name —— 包的名称，必须是唯一的，由小写英文字母、数字和下划线组成，不能包含空格&lt;/li&gt;
  &lt;li&gt;description —— 包的简要说明&lt;/li&gt;
  &lt;li&gt;version —— 包的版本&lt;/li&gt;
  &lt;li&gt;author —— 包的作者&lt;/li&gt;
  &lt;li&gt;contributors —— 贡献者数组，数组每一项为一个包含一个贡献者资料的对象&lt;/li&gt;
  &lt;li&gt;dependencies —— 包的依赖，为一个对象，对象的属性为包名称，属性值为版本号&lt;/li&gt;
  &lt;li&gt;devDependencies —— 开发环境下的包依赖，为一个对象，对象的属性为包名称，属性值为版本号&lt;/li&gt;
  &lt;li&gt;keywords —— 关键字数组，通常用于搜索&lt;/li&gt;
  &lt;li&gt;repository —— 仓库托管地址，通常为一个包含type（仓库的类型，如：git）和 url（仓库的地址）的对象&lt;/li&gt;
  &lt;li&gt;main —— 包的入口文件，如不指定，则默认为根目录下的index.js或index.node&lt;/li&gt;
  &lt;li&gt;bin —— 可执行文件的路径&lt;/li&gt;
  &lt;li&gt;bugs —— 提交bug的地址&lt;/li&gt;
  &lt;li&gt;maintainers —— 维护者数组，数组每一项为一个包含一个维护者资料的对象&lt;/li&gt;
  &lt;li&gt;licenses —— 许可证数组，数组每一项为一个包含type（许可证的名称）和url（链接到许可证文本的地址）的对象&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 06 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/06/explaination-for-package-json/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/06/explaination-for-package-json/</guid>
        
        <category>npm nodejs</category>
        
        
      </item>
    
      <item>
        <title>如何在npm上发布一个包</title>
        <description>&lt;blockquote&gt;

&lt;/blockquote&gt;

&lt;p&gt;我们可以从npm仓库上安装含有package.json文件的目录作为一个包,
当然也可以将一个含有package.json文件的目录作为一个包发布至npm仓库.&lt;/p&gt;

&lt;p&gt;下面就介绍一下如何发布包至npm仓库&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;发布前的必要步骤&lt;/h3&gt;

&lt;h4 id=&quot;npm&quot;&gt;创建一个npm用户&lt;/h4&gt;

&lt;p&gt;想要发布包, 你必须在npm仓库上有一个用户.
如果你还没有创建过, 执行&lt;code class=&quot;highlighter-rouge&quot;&gt;npm adduser&lt;/code&gt;, 或者可以在&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm仓库的网站&lt;/a&gt;上创建.&lt;/p&gt;

&lt;h4 id=&quot;npm-1&quot;&gt;登录你的npm帐号&lt;/h4&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm login&lt;/code&gt;登录,
登录后可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm whoami&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config ls&lt;/code&gt;来查看你的用户和权限信息&lt;/p&gt;

&lt;h3 id=&quot;npm-2&quot;&gt;发布npm包&lt;/h3&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;发布你的包, 包的名称在package.json的name里定义, &lt;a href=&quot;http://www.vanadis.cn/2016/07/06/explaination-for-package-json/&quot;&gt;点这里查看package.json中各字段的含义&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;需要注意, 除了&lt;em&gt;.gitignore&lt;/em&gt;或者&lt;em&gt;.npmignore&lt;/em&gt;中定义的忽略, 目录中所有的文件都会被发布&lt;/p&gt;

&lt;p&gt;发布完后, 可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;https://npmjs.com/package/&amp;lt;package&amp;gt;&lt;/code&gt;查看你新发布的包的信息&lt;/p&gt;

&lt;h3 id=&quot;npm-3&quot;&gt;更新npm包&lt;/h3&gt;

&lt;p&gt;修改你的包中的package.json中的&lt;em&gt;version&lt;/em&gt;版本号, &lt;a href=&quot;http://www.vanadis.cn/2016/07/06/explaination-for-package-json/&quot;&gt;点这里查看版本号的含义&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;npm publish&lt;/code&gt;发布你的更新包&lt;/p&gt;

&lt;p&gt;发布完后, 可以去&lt;code class=&quot;highlighter-rouge&quot;&gt;https://npmjs.com/package/&amp;lt;package&amp;gt;&lt;/code&gt;查看你新发布的包的信息, 可以看到版本号的变化&lt;/p&gt;

&lt;p&gt;需要注意, 在npm仓库网站上你发布的包中, 显示的readme中的内容只有在版本号更新的发布操作下才会更新&lt;/p&gt;

&lt;h3 id=&quot;npm-4&quot;&gt;下架npm包&lt;/h3&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm unpublish&lt;/code&gt;下架你的包&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;注意事项&lt;/h3&gt;

&lt;p&gt;由于众所周知的网络原因，react-native命令行从npm官方源拖代码时会遇上麻烦。
一般开发时需要npm仓库源替换为国内镜像：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry https://registry.npm.taobao.org --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set disturl https://npm.taobao.org/dist --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是发布包的时候如果不切换回默认配置, 在发布时会报错,&lt;/p&gt;

&lt;p&gt;故需要将仓库源替换回默认源&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set registry http://registry.npmjs.org --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm config set disturl http://npmjs.org/dist --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;更详细的内容, 可以查阅&lt;a href=&quot;https://docs.npmjs.com/&quot;&gt;npm官方文档&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://www.vanadis.cn/2016/07/05/how-to-publish-a-package-to-npm/</link>
        <guid isPermaLink="true">http://www.vanadis.cn/2016/07/05/how-to-publish-a-package-to-npm/</guid>
        
        <category>npm nodejs</category>
        
        
      </item>
    
  </channel>
</rss>
